{"title":"rcore-camp-2025S-stage2-lab5","slug":"rcore-camp-2025S-stage2-lab5","date":"2025-04-30T09:02:42.000Z","updated":"2025-05-05T04:30:44.385Z","comments":true,"path":"api/articles/rcore-camp-2025S-stage2-lab5.json","photos":[],"excerpt":null,"covers":null,"content":"<h1 id=\"编程作业\"><a href=\"#编程作业\" class=\"headerlink\" title=\"编程作业\"></a>编程作业</h1><h2 id=\"死锁检测\"><a href=\"#死锁检测\" class=\"headerlink\" title=\"死锁检测\"></a>死锁检测</h2><p>mutex只要发现无法申请加锁就判断为死锁即可<br>semaphore的话<br>每个线程内部自己维护 <code>need</code> 和 <code>allocation</code> 数组，其中存放的是 <code>(sem_id, count)</code>。<br>然后在 <code>down</code> 的时候在从各个线程中汇总起来，进行死锁检测计算。</p>\n<h1 id=\"简答作业\"><a href=\"#简答作业\" class=\"headerlink\" title=\"简答作业\"></a>简答作业</h1><h2 id=\"Q1-在我们的多线程实现中，当主线程-即-0-号线程-退出时，视为整个进程退出，-此时需要结束该进程管理的所有线程并回收其资源。\"><a href=\"#Q1-在我们的多线程实现中，当主线程-即-0-号线程-退出时，视为整个进程退出，-此时需要结束该进程管理的所有线程并回收其资源。\" class=\"headerlink\" title=\"Q1.在我们的多线程实现中，当主线程 (即 0 号线程) 退出时，视为整个进程退出， 此时需要结束该进程管理的所有线程并回收其资源。\"></a>Q1.在我们的多线程实现中，当主线程 (即 0 号线程) 退出时，视为整个进程退出， 此时需要结束该进程管理的所有线程并回收其资源。</h2><ul>\n<li>需要回收的资源有哪些？<ul>\n<li>线程资源</li>\n<li>内存资源</li>\n<li>同步资源（如锁、信号量</li>\n<li>IO资源</li>\n</ul>\n</li>\n<li>其他线程的 TaskControlBlock 可能在哪些位置被引用，分别是否需要回收，为什么？<ul>\n<li>任务队列：需要回收，避免内存泄漏</li>\n<li>线程调度器：需要回收，调度器会持有无用的引用，这会导致内存泄漏或资源浪费。</li>\n<li>等待队列：线程在等待某个资源，但是线程已经退出了，如果没及时移除，可能会导致内存泄漏。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Q2-对比以下两种-Mutex-中的实现，二者有什么区别？这些区别可能会导致什么问题？\"><a href=\"#Q2-对比以下两种-Mutex-中的实现，二者有什么区别？这些区别可能会导致什么问题？\" class=\"headerlink\" title=\"Q2.对比以下两种 Mutex 中的实现，二者有什么区别？这些区别可能会导致什么问题？\"></a>Q2.对比以下两种 Mutex 中的实现，二者有什么区别？这些区别可能会导致什么问题？</h2><p>应该是对locked状态的处理不同<br>Mutex1：无论是否有等待的任务，都会先将 locked 设为 false，然后再尝试唤醒等待队列中的任务。<br>Mutex2：只有在没有等待任务时，才将 locked 设为 false；如果有等待任务，locked 状态保持为 true。</p>\n<p>在 Mutex1 中，当有等待任务时，将 locked 设为 false 后，可能会导致其他线程在等待的任务被唤醒并获取锁之前获得锁，造成竞争条件，破坏互斥锁的正确性。<br>Mutex2 的实现避免了这个问题，因为当有等待任务时，locked 保持为 true，确保了只有被唤醒的任务才能继续持有锁，维护了互斥性。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Mutex</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Mutex1</span> {</span><br><span class=\"line\">   <span class=\"keyword\">fn</span> <span class=\"title function_\">unlock</span>(&amp;<span class=\"keyword\">self</span>) {</span><br><span class=\"line\">      <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">mutex_inner</span> = <span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">exclusive_access</span>();</span><br><span class=\"line\">      <span class=\"built_in\">assert!</span>(mutex_inner.locked);</span><br><span class=\"line\">      mutex_inner.locked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Some</span>(waking_task) = mutex_inner.wait_queue.<span class=\"title function_ invoke__\">pop_front</span>() {</span><br><span class=\"line\">         <span class=\"title function_ invoke__\">add_task</span>(waking_task);</span><br><span class=\"line\">      }</span><br><span class=\"line\">   }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Mutex</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Mutex2</span> {</span><br><span class=\"line\">   <span class=\"keyword\">fn</span> <span class=\"title function_\">unlock</span>(&amp;<span class=\"keyword\">self</span>) {</span><br><span class=\"line\">      <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">mutex_inner</span> = <span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">exclusive_access</span>();</span><br><span class=\"line\">      <span class=\"built_in\">assert!</span>(mutex_inner.locked);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Some</span>(waking_task) = mutex_inner.wait_queue.<span class=\"title function_ invoke__\">pop_front</span>() {</span><br><span class=\"line\">         <span class=\"title function_ invoke__\">add_task</span>(waking_task);</span><br><span class=\"line\">      } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">         mutex_inner.locked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      }</span><br><span class=\"line\">   }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"荣誉准则\"><a href=\"#荣誉准则\" class=\"headerlink\" title=\"荣誉准则\"></a>荣誉准则</h1><ol>\n<li><p>在完成本次实验的过程（含此前学习的过程）中，我曾分别与 以下各位 就（与本次实验相关的）以下方面做过交流，还在代码中对应的位置以注释形式记录了具体的交流对象及内容：</p>\n<p>无</p>\n</li>\n<li><p>此外，我也参考了 以下资料 ，还在代码中对应的位置以注释形式记录了具体的参考来源及内容：</p>\n<p>无</p>\n</li>\n<li><p>我独立完成了本次实验除以上方面之外的所有工作，包括代码与文档。 我清楚地知道，从以上方面获得的信息在一定程度上降低了实验难度，可能会影响起评分。</p>\n</li>\n<li><p>我从未使用过他人的代码，不管是原封不动地复制，还是经过了某些等价转换。 我未曾也不会向他人（含此后各届同学）复制或公开我的实验代码，我有义务妥善保管好它们。 我提交至本实验的评测系统的代码，均无意于破坏或妨碍任何计算机系统的正常运转。 我清楚地知道，以上情况均为本课程纪律所禁止，若违反，对应的实验成绩将按“-100”分计。</p>\n</li>\n</ol>\n","categories":[],"tags":[{"name":"Rcore","slug":"Rcore","count":6,"path":"api/tags/Rcore.json"}]}