{"title":"rcore_camp_2025S_stage1&2","slug":"rcore-camp-2025S-stage1&2","date":"2025-04-30T09:03:26.000Z","updated":"2025-05-05T04:30:44.384Z","comments":true,"path":"api/articles/rcore-camp-2025S-stage1&2.json","photos":[],"excerpt":"前导本博客作为开源操作系统训练营2025S的1、2阶段学习记录，简单总结了在这两个阶段的学习和coding。留作纪念，也希望能够帮助到大家。","covers":null,"content":"<h1 id=\"前导\"><a href=\"#前导\" class=\"headerlink\" title=\"前导\"></a>前导</h1><p>本博客作为开源操作系统训练营2025S的1、2阶段学习记录，简单总结了在这两个阶段的学习和coding。留作纪念，也希望能够帮助到大家。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Stage1\"><a href=\"#Stage1\" class=\"headerlink\" title=\"Stage1\"></a>Stage1</h1><h2 id=\"所有权系统\"><a href=\"#所有权系统\" class=\"headerlink\" title=\"所有权系统\"></a>所有权系统</h2><p>在传统的语言中，要么使用GC来管理内存（如Java），要么让程序员自己管理内存（如C/C++）。<br>前者需要运行在虚拟机上，并且性能较低。<br>后者则对程序员提出了更高的要求，能力越大责任越大。并且程序员总有可能会出错，导致内存管理的疏漏。<br>而 Rust 提出了第三种方法——所有权系统：</p>\n<ul>\n<li>Rust 中的每一个值都有一个被称为其 所有者（owner）的变量。</li>\n<li>值在任一时刻有且只有一个所有者。</li>\n<li>当所有者（变量）离开作用域，这个值将被丢弃。<br>并在此基础上，诞生了引用、借用等特性。<br>因为之前在C++中了解过RAII，所以对 rust 的 drop 也是易于理解的。</li>\n</ul>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>其实这也是所有权系统的一部分，Rust的每一个引用都有其生命周期，也就是引用保持有效的作用域。<br>在大多数情况下，生命周期是被隐含且编译器可自行推断的。但是有时候也需要程序员的帮助。<br>详见：<a href=\"https://rustwiki.org/zh-CN/book/ch10-03-lifetime-syntax.html\">生命周期</a></p>\n<h2 id=\"Result-相较于传统语言的-try-catch-和-throw-等异常处理的优势\"><a href=\"#Result-相较于传统语言的-try-catch-和-throw-等异常处理的优势\" class=\"headerlink\" title=\"Result 相较于传统语言的 try-catch 和 throw 等异常处理的优势\"></a>Result 相较于传统语言的 try-catch 和 throw 等异常处理的优势</h2><h3 id=\"1-强制处理异常，避免了隐式传播\"><a href=\"#1-强制处理异常，避免了隐式传播\" class=\"headerlink\" title=\"1.强制处理异常，避免了隐式传播\"></a>1.强制处理异常，避免了隐式传播</h3><p>在传统的异常处理模型中，例如使用 try-catch 或 throw，异常会在程序中隐式传播，直到被捕获或程序终止。这种隐式的传播方式可能导致错误不容易追踪，并且可能被程序中断或忽视。</p>\n<p>Rust 的 Result 类型则采用显式的错误传递。函数返回 Result&lt;T, E&gt;，调用者必须显式地处理错误（要么通过 .unwrap()、.expect()，要么通过模式匹配）。这种显式要求迫使开发者在编写代码时考虑错误的处理，而不是依赖于隐式的错误传递。</p>\n<h3 id=\"2-加强类型安全\"><a href=\"#2-加强类型安全\" class=\"headerlink\" title=\"2.加强类型安全\"></a>2.加强类型安全</h3><p>Rust 的 Result 类型是泛型的，其中包含了明确的错误类型。这意味着可以对不同的错误进行不同的处理和类型化错误。每个 Result 类型都指定了具体的错误类型 E，这为错误处理提供了更强的类型安全性。</p>\n<p>在传统的异常处理模型中，异常通常是某个基类的实例（如 Java 中的 Exception），导致很难进行精确的错误类型处理。例如，catch (Exception) 会捕获所有类型的异常，这样做会隐藏不同异常之间的细节。</p>\n<p>Rust 通过类型系统强制调用者处理不同类型的错误，提供了更强的错误隔离和控制。</p>\n<h3 id=\"3-性能优势\"><a href=\"#3-性能优势\" class=\"headerlink\" title=\"3.性能优势\"></a>3.性能优势</h3><p>在传统的异常机制中，抛出和捕获异常通常会涉及到栈展开和内存分配等操作，这对性能有一定的负担。而 Rust 的 Result 类型不涉及这些高昂的操作，它仅仅是返回一个枚举类型，并且依赖于函数调用栈上的显式处理，避免了异常机制的额外开销。</p>\n<h2 id=\"Trait\"><a href=\"#Trait\" class=\"headerlink\" title=\"Trait\"></a>Trait</h2><p>虽然trait类似于其他语言的接口，但是trait比interface更加强大。<br>TODO：这部分留到之后单独出一篇博客讲讲。</p>\n<h2 id=\"Cargo-Crates-io\"><a href=\"#Cargo-Crates-io\" class=\"headerlink\" title=\"Cargo & Crates.io\"></a>Cargo &amp; Crates.io</h2><p>一个项目管理工具，不用像 C++ 项目那样，想要引用外部的项目的话，就需要git子模块。相当难用，并且还有一堆依赖和版本问题。<br>有些C++程序员甚至会为了解决这种麻烦，选择了更麻烦的自己重新造轮子。<br>而Rust提供了一个非常方便的包管理工具，可以非常容易且方便地进行包管理</p>\n<h2 id=\"Clippy\"><a href=\"#Clippy\" class=\"headerlink\" title=\"Clippy\"></a>Clippy</h2><p>可以帮助Rust程序员写出更加符合规范的代码</p>\n<h2 id=\"Docs\"><a href=\"#Docs\" class=\"headerlink\" title=\"Docs\"></a>Docs</h2><p>可以根据注释 /// 自动生成文档，非常方便</p>\n<h1 id=\"Stage2\"><a href=\"#Stage2\" class=\"headerlink\" title=\"Stage2\"></a>Stage2</h1><p>本次训练营只实现了必做题，选做题都还TODO呢，有空再做做。<br>具体的每个Lab可以看对应链接，此处仅简单地总结一下：</p>\n<h2 id=\"Lab1\"><a href=\"#Lab1\" class=\"headerlink\" title=\"Lab1\"></a>Lab1</h2><p><a href=\"https://ziyan137.github.io/#/posts/rcore-camp-2025S-stage2-lab1\">lab1</a><br>lab1实现了 <code>get_time</code> 和 <code>trace</code> 。详细地阅读了Rcore的设计</p>\n<h2 id=\"Lab2\"><a href=\"#Lab2\" class=\"headerlink\" title=\"Lab2\"></a>Lab2</h2><p><a href=\"https://ziyan137.github.io/#/posts/rcore-camp-2025S-stage2-lab2\">lab2</a><br>lab2实现了 <code>mmap</code> 和 <code>mumap</code> ，并且重写了lab1的两个实现。主要还是实现一个虚拟地址到物理地址的转换，然后读懂Rcore的内存组织形式</p>\n<h2 id=\"Lab3\"><a href=\"#Lab3\" class=\"headerlink\" title=\"Lab3\"></a>Lab3</h2><p><a href=\"https://ziyan137.github.io/#/posts/rcore-camp-2025S-stage2-lab3\">lab3</a><br>lab3实现了 <code>spawn</code> 和 <code>stride</code> 调度算法。<br> <code>spawn</code> 虽然不等于 <code>fork</code> + <code>exec</code> ，但是也大差不差，在这里就各copy一点出来就行了。<br> <code>stride</code> 就在各个进程里添加 <code>stride</code> 和 <code>priority</code> 。然后把 <code>Manager</code> 用来维护队列的数据结构换成优先队列（也就是堆）即可。</p>\n<h2 id=\"Lab4\"><a href=\"#Lab4\" class=\"headerlink\" title=\"Lab4\"></a>Lab4</h2><p><a href=\"https://ziyan137.github.io/#/posts/rcore-camp-2025S-stage2-lab4\">lab4</a><br>lab4实现了 <code>linkat</code> 、<code>unlinkat</code> 、<code>fstat</code> 等。阅读了ez-fs的实现。</p>\n<h2 id=\"Lab5\"><a href=\"#Lab5\" class=\"headerlink\" title=\"Lab5\"></a>Lab5</h2><p><a href=\"https://ziyan137.github.io/#/posts/rcore-camp-2025S-stage2-lab5\">lab5</a></p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>本次参加开源操作系统训练营，算是第二次参加了。相比于2024A那次，匆忙地、囫囵吞枣式地、碎片地学习操作系统。<br>这次相对来说更加轻松一点，因为已经系统性地学习过了。并且代码能力也有了不小的提升，能够更加理解这些设计。<br>上一期训练营中就接触到了Rust编程语言，非常认同其哲学，并非常喜欢使用Rust。<br>相较于上次勉强看懂，勉强能写lab，这次明显更加游刃有余了。</p>\n","categories":[],"tags":[{"name":"Rcore","slug":"Rcore","count":6,"path":"api/tags/Rcore.json"}]}