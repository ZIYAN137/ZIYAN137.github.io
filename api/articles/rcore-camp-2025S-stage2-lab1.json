{"title":"rcore-camp-2025S-stage2-lab1","slug":"rcore-camp-2025S-stage2-lab1","date":"2025-04-30T09:01:44.000Z","updated":"2025-05-05T04:30:44.384Z","comments":true,"path":"api/articles/rcore-camp-2025S-stage2-lab1.json","photos":[],"excerpt":null,"covers":null,"content":"<h1 id=\"编程作业\"><a href=\"#编程作业\" class=\"headerlink\" title=\"编程作业\"></a>编程作业</h1><p>首先在 <code>config.rs</code> 中添加常量 <code>MAX_SYSCALL_NUM = 500</code></p>\n<p>然后修改 <code>TaskControlBlock</code> 的结构，添加了 <code>syscall-times</code> ，用于记录task对于每个系统调用的次数。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">TaskControlBlock</span> {</span><br><span class=\"line\">    <span class=\"comment\">/// The task status in it's lifecycle</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> task_status: TaskStatus,</span><br><span class=\"line\">    <span class=\"comment\">/// The task context</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> task_cx: TaskContext,</span><br><span class=\"line\">    <span class=\"comment\">/// syscall times</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> syscall_times: [<span class=\"type\">u32</span>; MAX_SYSCALL_NUM]</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<p>然后 <code>task</code> 模块中添加相关的计数和获取的相关函数</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">cnt_syscall</span>(&amp;<span class=\"keyword\">self</span>, syscall_id: <span class=\"type\">usize</span>) {</span><br><span class=\"line\">    ...</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">get_syscall_times</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> [<span class=\"type\">u32</span>; MAX_SYSCALL_NUM] {</span><br><span class=\"line\">    ...</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<p>在syscall中添加一行，每次syscall时触发计数。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">syscall</span>(syscall_id: <span class=\"type\">usize</span>, args: [<span class=\"type\">usize</span>; <span class=\"number\">3</span>]) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">isize</span> {</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">cnt_syscall</span>(syscall_id);    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<p>最后实现 <code>sys_trace</code> </p>\n<h1 id=\"简答作业\"><a href=\"#简答作业\" class=\"headerlink\" title=\"简答作业\"></a>简答作业</h1><h2 id=\"Q1\"><a href=\"#Q1\" class=\"headerlink\" title=\"Q1\"></a>Q1</h2><p>正确进入 U 态后，程序的特征还应有：使用 S 态特权指令，访问 S 态寄存器后会报错。 请同学们可以自行测试这些内容（运行 三个 bad 测例 (ch2b_bad_*.rs) ）， 描述程序出错行为，同时注意注明你使用的 sbi 及其版本。</p>\n<h2 id=\"A1\"><a href=\"#A1\" class=\"headerlink\" title=\"A1\"></a>A1</h2><p>ch2b_bad_address.rs<br>程序尝试向地址 0x0 写入数据，触发地址访问异常（Address Fault）。<br>错误行为：程序陷入异常处理流程，打印错误信息或直接终止。</p>\n<p>ch2b_bad_instructions.rs<br>程序尝试执行 sret 指令（S 态特权指令），触发非法指令异常（Illegal Instruction）。<br>错误行为：程序无法继续执行，陷入异常处理流程。</p>\n<p>ch2b_bad_register.rs<br>程序尝试读取 sstatus 寄存器（S 态特权寄存器），触发非法指令异常（Illegal Instruction）。<br>错误行为：程序无法继续执行，陷入异常处理流程。</p>\n<h2 id=\"Q2\"><a href=\"#Q2\" class=\"headerlink\" title=\"Q2\"></a>Q2</h2><p>深入理解 trap.S 中两个函数 <code>__alltraps</code> 和 <code>__restore</code> 的作用，并回答如下问题:</p>\n<h3 id=\"Q2-1\"><a href=\"#Q2-1\" class=\"headerlink\" title=\"Q2.1\"></a>Q2.1</h3><p>L40：刚进入 <code>__restore</code> 时，<code>sp</code> 代表了什么值。请指出 <code>__restore</code> 的两种使用情景。</p>\n<h3 id=\"A2-1\"><a href=\"#A2-1\" class=\"headerlink\" title=\"A2.1\"></a>A2.1</h3><p> <code>sp</code> 指向内核栈中保存的TrapContext的起始地址。使用场景：</p>\n<p>从 S 态返回到 U 态，恢复用户态的寄存器和状态。</p>\n<p>从中断或异常处理返回到用户态，恢复用户态的执行上下文。</p>\n<h3 id=\"Q2-2\"><a href=\"#Q2-2\" class=\"headerlink\" title=\"Q2.2\"></a>Q2.2</h3><p>L43-L48：这几行汇编代码特殊处理了哪些寄存器？这些寄存器的的值对于进入用户态有何意义？请分别解释。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ld t0, 32*8(sp)</span><br><span class=\"line\">ld t1, 33*8(sp)</span><br><span class=\"line\">ld t2, 2*8(sp)</span><br><span class=\"line\">csrw sstatus, t0</span><br><span class=\"line\">csrw sepc, t1</span><br><span class=\"line\">csrw sscratch, t2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"A2-2\"><a href=\"#A2-2\" class=\"headerlink\" title=\"A2.2\"></a>A2.2</h3><p>特殊处理了 <code>sstatus</code> , <code>sepc</code>, <code>sscratch</code> 这三个寄存器。</p>\n<ul>\n<li><code>sstatus</code>: 一个状态寄存器，包含了处理器的当前状态信息,恢复sstatus确保返回用户态时具有正确状态</li>\n<li><code>sepc</code>: 保存了处理器需要返回的指令地址，恢复sepc使得处理器能够在处理完异常或中断后继续执行被中断的程序</li>\n<li><code>sscratch</code>: 临时寄存器，此处保存了用户栈指针，临时存放，使得处理器能够在处理完异常或中断后继续执行被中断的程序</li>\n</ul>\n<h3 id=\"Q2-3\"><a href=\"#Q2-3\" class=\"headerlink\" title=\"Q2.3\"></a>Q2.3</h3><p>L50-L56：为何跳过了 <code>x2</code> 和 <code>x4</code>？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ld x1, 1*8(sp)</span><br><span class=\"line\">ld x3, 3*8(sp)</span><br><span class=\"line\">.set n, 5</span><br><span class=\"line\">.rept 27</span><br><span class=\"line\">   LOAD_GP %n</span><br><span class=\"line\">   .set n, n+1</span><br><span class=\"line\">.endr</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"A2-3\"><a href=\"#A2-3\" class=\"headerlink\" title=\"A2.3\"></a>A2.3</h3><p>x2应该是2*8(sp)，但是这里是栈指针，此时已经存在sscratch中。x4是tp线程指针寄存器，用户态程序不使用</p>\n<h3 id=\"Q2-4\"><a href=\"#Q2-4\" class=\"headerlink\" title=\"Q2.4\"></a>Q2.4</h3><p>L60：该指令之后，<code>sp</code> 和 <code>sscratch</code> 中的值分别有什么意义？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">csrrw sp, sscratch, sp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"A2-4\"><a href=\"#A2-4\" class=\"headerlink\" title=\"A2.4\"></a>A2.4</h3><p>sscratch是内核栈指针， sp是用户栈指针</p>\n<h3 id=\"Q2-5\"><a href=\"#Q2-5\" class=\"headerlink\" title=\"Q2.5\"></a>Q2.5</h3><p>__restore：中发生状态切换在哪一条指令？为何该指令执行之后会进入用户态？</p>\n<h3 id=\"A2-5\"><a href=\"#A2-5\" class=\"headerlink\" title=\"A2.5\"></a>A2.5</h3><p><code>sret</code> 返回原来的程序流</p>\n<h3 id=\"Q2-6\"><a href=\"#Q2-6\" class=\"headerlink\" title=\"Q2.6\"></a>Q2.6</h3><p>L13：该指令之后，<code>sp</code> 和 <code>sscratch</code> 中的值分别有什么意义？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">csrrw sp, sscratch, sp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"A2-6\"><a href=\"#A2-6\" class=\"headerlink\" title=\"A2.6\"></a>A2.6</h3><p><code>sp</code> 切换为内核栈指针，<code>sscratch</code> 保存用户态指针</p>\n<h3 id=\"Q2-7\"><a href=\"#Q2-7\" class=\"headerlink\" title=\"Q2.7\"></a>Q2.7</h3><p>从 U 态进入 S 态是哪一条指令发生的？</p>\n<h3 id=\"A2-7\"><a href=\"#A2-7\" class=\"headerlink\" title=\"A2.7\"></a>A2.7</h3><p>触发trap后，通过L13切换到内核栈，从 U 态进入 S 态</p>\n<h1 id=\"荣誉准则\"><a href=\"#荣誉准则\" class=\"headerlink\" title=\"荣誉准则\"></a>荣誉准则</h1><ol>\n<li><p>在完成本次实验的过程（含此前学习的过程）中，我曾分别与 以下各位 就（与本次实验相关的）以下方面做过交流，还在代码中对应的位置以注释形式记录了具体的交流对象及内容：</p>\n<p> 无</p>\n</li>\n<li><p>此外，我也参考了 以下资料 ，还在代码中对应的位置以注释形式记录了具体的参考来源及内容：</p>\n<p> 无</p>\n</li>\n<li><p>我独立完成了本次实验除以上方面之外的所有工作，包括代码与文档。 我清楚地知道，从以上方面获得的信息在一定程度上降低了实验难度，可能会影响起评分。</p>\n</li>\n<li><p>我从未使用过他人的代码，不管是原封不动地复制，还是经过了某些等价转换。 我未曾也不会向他人（含此后各届同学）复制或公开我的实验代码，我有义务妥善保管好它们。 我提交至本实验的评测系统的代码，均无意于破坏或妨碍任何计算机系统的正常运转。 我清楚地知道，以上情况均为本课程纪律所禁止，若违反，对应的实验成绩将按“-100”分计。</p>\n</li>\n</ol>\n","categories":[],"tags":[{"name":"Rcore","slug":"Rcore","count":6,"path":"api/tags/Rcore.json"}]}