{"title":"计算机网络（中科大）_Chapter5","slug":"计算机网络（中科大）_Chapter5","date":"2025-03-31T07:09:58.000Z","updated":"2025-05-05T04:30:44.385Z","comments":true,"path":"api/articles/计算机网络（中科大）_Chapter5.json","photos":[],"excerpt":"第五章 网络层: 控制平面网络层不仅负责数据包的转发，还承担着重要的控制职能，这一职能通常由控制平面来实现。控制平面主要负责路由选择，即决定数据包应通过哪些路径从源主机传输到目标主机。它通过交换和更新路由信息，确保网络能够应对动态变化，保持数据传输的高效与稳定。本章将深入探讨网络层的控制平面，重点介绍不同类型的路由选择算法，包括Link State算法与Distance Vector算法的工作原理、优缺点及应用情况。同时，我们还将详细讲解自治系统内部的路由选择协议，如RIP和OSPF，以及它们如何在不同规模的网络中发挥作用。此外，BGP协议在ISP之间的路由选择中扮演着重要角色，它如何基于策略而非单纯的性能进行路径选择，也将在本章中得到深入分析。通过本章的学习，您将能够理解控制平面在网络层中的核心作用，掌握常见的路由算法以及它们在实际网络中的应用。","covers":["/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter5/Cover.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter5/image-121.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter5/image-149.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter5/image-148.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter5/image-145.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter5/image-144.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter5/image-141.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter5/image-140.png"],"content":"<h1 id=\"第五章-网络层-控制平面\"><a href=\"#第五章-网络层-控制平面\" class=\"headerlink\" title=\"第五章 网络层: 控制平面\"></a>第五章 网络层: 控制平面</h1><p>网络层不仅负责数据包的转发，还承担着重要的控制职能，这一职能通常由控制平面来实现。控制平面主要负责路由选择，即决定数据包应通过哪些路径从源主机传输到目标主机。它通过交换和更新路由信息，确保网络能够应对动态变化，保持数据传输的高效与稳定。</p>\n<p>本章将深入探讨网络层的控制平面，重点介绍不同类型的路由选择算法，包括Link State算法与Distance Vector算法的工作原理、优缺点及应用情况。同时，我们还将详细讲解自治系统内部的路由选择协议，如RIP和OSPF，以及它们如何在不同规模的网络中发挥作用。此外，BGP协议在ISP之间的路由选择中扮演着重要角色，它如何基于策略而非单纯的性能进行路径选择，也将在本章中得到深入分析。</p>\n<p>通过本章的学习，您将能够理解控制平面在网络层中的核心作用，掌握常见的路由算法以及它们在实际网络中的应用。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter5/Cover.png\"></p>\n<h2 id=\"5-2-路由选择算法\"><a href=\"#5-2-路由选择算法\" class=\"headerlink\" title=\"5.2 路由选择算法\"></a>5.2 路由选择算法</h2><h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><p>按照某种指标（传输延迟，缩进过站点数等）找到一条从源节点到目标节点的较好路径</p>\n<ul>\n<li><p>较好路径：按照某种指标较小的路径</p>\n</li>\n<li><p>指标：站数，延迟，费用，队列长度等，或者一些单纯指标的加权平均</p>\n</li>\n</ul>\n<p>以网络为单位进行路由（路由信息通告+路由计算）</p>\n<ul>\n<li><p>网络为单位进行路由，路由信息传输、计算和匹配的代价低</p>\n</li>\n<li><p>前提条件是：一个网络所有节点前缀相同，且物理上聚集</p>\n</li>\n<li><p>路由就是计算网络到其他网络如何走的问题</p>\n</li>\n</ul>\n<p>网络到网络的路由==路由器-路由器之间的路由。</p>\n<p>路由选择算法：网络层软件的一部分，完成路由功能。</p>\n<h3 id=\"网络的图抽象\"><a href=\"#网络的图抽象\" class=\"headerlink\" title=\"网络的图抽象\"></a>网络的图抽象</h3><p>N为路由器的集合，E为链路的集合</p>\n<p>路径的代价取决于指标。</p>\n<p>路由的输入：拓扑、边的代价、源节点</p>\n<p>路由的输出：源节点的汇集树</p>\n<h4 id=\"最优化原则\"><a href=\"#最优化原则\" class=\"headerlink\" title=\"最优化原则\"></a>最优化原则</h4><p>汇集树</p>\n<ul>\n<li><p>此节点到所有其他节点的最优路径形成的树</p>\n</li>\n<li><p>路由选择算法就是为所有路由器找到并使用汇集树</p>\n</li>\n</ul>\n<p>路由的原则</p>\n<ul>\n<li><p>正确性</p>\n</li>\n<li><p>简单性</p>\n</li>\n<li><p>健壮性</p>\n</li>\n<li><p>稳定性</p>\n</li>\n<li><p>公平性</p>\n</li>\n<li><p>最优性</p>\n</li>\n</ul>\n<h3 id=\"路由算法分类\"><a href=\"#路由算法分类\" class=\"headerlink\" title=\"路由算法分类\"></a>路由算法分类</h3><p>全局或局部？</p>\n<p>全局：所有的路由器都拥有完整的拓扑和边的代价的信息，link state算法</p>\n<p>分布式：路由器只知道与他有物理连接关系的邻居路由器，和相应的代价。迭代地与邻居交换和计算路由信息。distance vector算法</p>\n<p>静态或动态？</p>\n<p>静态：路由随时间缓慢变化。非自适应算法，不能适应网络拓扑和通信量的变化</p>\n<p>动态：路由信息变化很快，周期性更新，根据链路代价的变化而变化。能适应网络拓扑和通信量的变化</p>\n<h3 id=\"Link-State算法（dijkstra）\"><a href=\"#Link-State算法（dijkstra）\" class=\"headerlink\" title=\"Link State算法（dijkstra）\"></a>Link State算法（dijkstra）</h3><p>配置LS路由选择算法的路由工作过程</p>\n<ul>\n<li><p>各点通过各种渠道获得整个网络拓扑，网络中所有链路代价等信息</p>\n</li>\n<li><p>使用LS路由算法，计算本站点到其他站点的最优路径（汇集树），得到路由表</p>\n</li>\n</ul>\n<h4 id=\"LS路由的基本工作过程\"><a href=\"#LS路由的基本工作过程\" class=\"headerlink\" title=\"LS路由的基本工作过程\"></a>LS路由的基本工作过程</h4><ol>\n<li><p>发现相邻节点,获知对方网络地址</p>\n</li>\n<li><p>测量到相邻节点的代价(延迟,开销)</p>\n</li>\n<li><p>组装一个LS分组,描述它到相邻节点的代价情况</p>\n</li>\n<li><p>将分组通过扩散的方法发到所有其它路由器。以上4步让每个路由器获得拓扑和边代价</p>\n</li>\n<li><p>通过Dijkstra算法找出最短路径（这才是路由算法）</p>\n<ol>\n<li><p>每个节点独立算出来到其他节点（路由器=网络）的最短路径</p>\n</li>\n<li><p>迭代算法：第k步能够知道本节点到k个其他节点的最短路径</p>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"发现相邻节点-获知对方网络地址\"><a href=\"#发现相邻节点-获知对方网络地址\" class=\"headerlink\" title=\"发现相邻节点,获知对方网络地址\"></a>发现相邻节点,获知对方网络地址</h4><p>一个路由器向所有线路发送Hello分组</p>\n<p>其他路由器收到hello分组，回送应答，在应答分组中，告知自己的名字（全局唯一）</p>\n<p>在LAN中，通过广播Hello分组，获取其他路由器的信息，可以认为引入一个人工节点</p>\n<h4 id=\"测量到相邻节点的代价-延迟-开销\"><a href=\"#测量到相邻节点的代价-延迟-开销\" class=\"headerlink\" title=\"测量到相邻节点的代价(延迟,开销)\"></a>测量到相邻节点的代价(延迟,开销)</h4><p>发送一个分组，要求对方立刻响应，回送Echo分组，通过测量时间估算延迟</p>\n<h4 id=\"组装一个分组-描述相邻节点的情况\"><a href=\"#组装一个分组-描述相邻节点的情况\" class=\"headerlink\" title=\"组装一个分组,描述相邻节点的情况\"></a>组装一个分组,描述相邻节点的情况</h4><p>发送者名称，序号，年龄，列表（相邻节点，以及到相邻节点的延迟）</p>\n<h4 id=\"将分组通过扩散的方法发到所有其它路由器\"><a href=\"#将分组通过扩散的方法发到所有其它路由器\" class=\"headerlink\" title=\"将分组通过扩散的方法发到所有其它路由器\"></a>将分组通过扩散的方法发到所有其它路由器</h4><p>顺序号：用于控制无穷的扩散，每个服务器都记录（源路由器，顺序号）发现重复或老的就不扩散</p>\n<p>具体问题：</p>\n<ol>\n<li><p>循环使用</p>\n</li>\n<li><p>路由器崩溃后序号从0开始</p>\n</li>\n<li><p>序号出现错误</p>\n</li>\n</ol>\n<p>解决：年龄字段</p>\n<ul>\n<li><p>生成一个分组时，年龄字段不为0</p>\n</li>\n<li><p>每一个时间段，年龄字段-1</p>\n</li>\n<li><p>年龄为0的分组被抛弃</p>\n</li>\n</ul>\n<p>扩散分组的数据结构：</p>\n<p>Source :从哪个节点收到LS分组 </p>\n<p>Seq,Age:序号,年龄 </p>\n<p>Send flags:发送标记,必须向指定的哪些相邻站点转发LS分组 </p>\n<p>ACK flags:本站点必须向哪些相邻站点发送应答 </p>\n<p>DATA:来自source站点的LS分组 </p>\n<p>节点B的数据结构 </p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter5/image-121.png\"></p>\n<h4 id=\"通过Dijkstra算法找出最短路径\"><a href=\"#通过Dijkstra算法找出最短路径\" class=\"headerlink\" title=\"通过Dijkstra算法找出最短路径\"></a>通过Dijkstra算法找出最短路径</h4><p>路由器获得各站点的LS分组和整个网络的拓扑</p>\n<p>将计算结果安装到路由表中</p>\n<h4 id=\"LS的应用情况\"><a href=\"#LS的应用情况\" class=\"headerlink\" title=\"LS的应用情况\"></a>LS的应用情况</h4><p>OSPF协议是一种LS协议，被用于Internet上</p>\n<p>IS-IS：被用于Internet主干中，Netware</p>\n<h3 id=\"Distance-Vector算法\"><a href=\"#Distance-Vector算法\" class=\"headerlink\" title=\"Distance Vector算法\"></a>Distance Vector算法</h3><p>各路由器维护一张路由表</p>\n<p>各路由器与相邻路由器交换路由表</p>\n<p>根据获得的路由信息，更新路由表</p>\n<p>定期测量它到相邻节点的代价，更新路由表</p>\n<p>定期与相邻节点交换路由表</p>\n<p>计算最佳路径：Bellman-Ford算法</p>\n<p>异步式，迭代的：每次本地迭代被以下事件触发：</p>\n<ul>\n<li><p>本地链路代价变化了</p>\n</li>\n<li><p>从相邻节点来了DV的更新</p>\n</li>\n</ul>\n<p>分布式的：</p>\n<ul>\n<li>每个阶段只在自己的DV改变后，向邻居通告</li>\n</ul>\n<h4 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h4><p>循环以下过程</p>\n<p>等待（本地路由器代价的便获或者从邻居传送的新的DV报文）</p>\n<p>重新计算Bellman-ford</p>\n<p>如果到任何目标的DV发生变化，则通告自己的邻居</p>\n<h4 id=\"DV的无穷计算问题\"><a href=\"#DV的无穷计算问题\" class=\"headerlink\" title=\"DV的无穷计算问题\"></a>DV的无穷计算问题</h4><p>DV的特点：好消息传得快，坏消息传得慢</p>\n<p>好消息（某个路由器接入或有更短的路径）的传播以每一个交换周期前进一个路由器的速度进行</p>\n<p>坏消息的传播速度非常慢（无穷计算问题）</p>\n<ol>\n<li><p>第一次交换之后, B从C处获得信息,C可以到达A(C-A, 要经过B本身),但是路径是2,因此B变成3,从C处走</p>\n</li>\n<li><p>第二次交换, C从B处获得消息, B可以到达A, 路径为3, 因此,C到A从B走, 代价为3</p>\n</li>\n<li><p>无限次之后, 到A的距离变成INF,不可达</p>\n</li>\n</ol>\n<h4 id=\"水平分裂（split-horizon）算法\"><a href=\"#水平分裂（split-horizon）算法\" class=\"headerlink\" title=\"水平分裂（split horizon）算法\"></a>水平分裂（split horizon）算法</h4><p>可以减缓但不能杜绝坏消息传得慢的特点</p>\n<p>在 DV 算法 中，路由信息是通过邻居之间的定期更新和交换来传播的。当网络发生拓扑变化时，错误的路由信息会被传播到其他路由器，形成 环路，导致 计数到无穷（Count-to-Infinity） 问题。这意味着错误的路径信息可能会在网络中持续传播，直到路由表收敛，形成较长时间的网络不稳定。</p>\n<ul>\n<li><p>水平分裂（Split Horizon）通过 禁止将信息回传给源路由器，避免了信息的循环传播，从而减少了环路的形成，减缓了坏消息的传播速度。</p>\n</li>\n<li><p>毒性逆转（Poison Reverse）通过 明确地告知邻居目标不可达，并设置高成本（如无限大），来加强这一机制，进一步避免错误信息在邻居之间的传播。</p>\n</li>\n</ul>\n<h3 id=\"LS和DV的比较\"><a href=\"#LS和DV的比较\" class=\"headerlink\" title=\"LS和DV的比较\"></a>LS和DV的比较</h3><ul>\n<li><p>消息复杂度（DV胜出）</p>\n<ul>\n<li><p>LS：有 n 节点, E 条链路,发送报文O(nE)个</p>\n</li>\n<li><p>DV：只和邻居交换信息</p>\n</li>\n</ul>\n</li>\n<li><p>收敛时间（LS胜出）</p>\n<ul>\n<li><p>LS: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 15.234ex;\"><svg style=\"vertical-align: -0.717ex; min-width: 15.234ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"2.565ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -817)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 817) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"1288.8 -817 1 1133.9\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\" transform=\"translate(0,-67)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mi\"><path data-c=\"1D442\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(763,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(1152,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,413) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2188.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -817 1 1133.9\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:1\" transform=\"translate(0,683)\"><text data-id-align=\"true\"></text><g data-idbox=\"true\" transform=\"translate(0,-750)\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></g></svg></g></g></g></g></svg></mjx-container>算法,可能震荡</p>\n</li>\n<li><p>DV: 可能存在路由环路,count-to-infinity问题</p>\n</li>\n</ul>\n</li>\n<li><p>健壮性（LS胜出）</p>\n<ul>\n<li><p>LS:</p>\n<ul>\n<li><p>节点会通告不正确的链路代价</p>\n</li>\n<li><p>每个节点只计算自己的路由表</p>\n</li>\n<li><p>错误信息影响较小，局部，路由较健壮</p>\n</li>\n</ul>\n</li>\n<li><p>DV: 节点可能通告对全网所有节点的不正确路径代价</p>\n<ul>\n<li>每一个节点的路由表可能被其它节点使用, 错误可以扩散到全网</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-3-自治系统内部的路由选择\"><a href=\"#5-3-自治系统内部的路由选择\" class=\"headerlink\" title=\"5.3 自治系统内部的路由选择\"></a>5.3 自治系统内部的路由选择</h2><h3 id=\"RIP（routing-information-protocol）\"><a href=\"#RIP（routing-information-protocol）\" class=\"headerlink\" title=\"RIP（routing information protocol）\"></a>RIP（routing information protocol）</h3><h4 id=\"DV算法\"><a href=\"#DV算法\" class=\"headerlink\" title=\"DV算法\"></a>DV算法</h4><ul>\n<li>距离矢量:每条链路cost=1，# of hops (max = 15 hops) 跳数</li>\n</ul>\n<h4 id=\"通告\"><a href=\"#通告\" class=\"headerlink\" title=\"通告\"></a>通告</h4><ul>\n<li><p>DV每隔30秒和邻居交换DV，通告</p>\n<ul>\n<li><p>定期，而且在改变路由的时候发送通告报文</p>\n</li>\n<li><p>在对方的请求下可以发送通告报文</p>\n</li>\n</ul>\n</li>\n<li><p>每个通告包括：最多25个目标子网（小网使用）</p>\n<ul>\n<li>至多AS内部的25个目标网络的DV，目标网络+跳数</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"链路失效与恢复\"><a href=\"#链路失效与恢复\" class=\"headerlink\" title=\"链路失效与恢复\"></a>链路失效与恢复</h4><p>如果180秒没有收到通告信息-&gt;邻居或者链路失效</p>\n<ul>\n<li><p>发现经过这个邻居的路由已失效 </p>\n</li>\n<li><p>新的通告报文会传递给邻居 </p>\n</li>\n<li><p>邻居因此发出新的通告 (如果路由变化的话) </p>\n</li>\n<li><p>链路失效快速(?)地在整网中传输 </p>\n</li>\n<li><p>使用毒性逆转（poison reverse）阻止ping-pong回路 (不可达的距离：跳数无限 = 16 段)</p>\n</li>\n</ul>\n<h4 id=\"进程处理\"><a href=\"#进程处理\" class=\"headerlink\" title=\"进程处理\"></a>进程处理</h4><p>RIP以应用进程的方式实现：route-d（daemon）</p>\n<p>通告报文通过UDP报文传送，周期性恢复</p>\n<p>网络层协议使用了传输层服务，以应用层实体的方式实现</p>\n<h3 id=\"OSPF（Open-Shortest-Path-First）\"><a href=\"#OSPF（Open-Shortest-Path-First）\" class=\"headerlink\" title=\"OSPF（Open Shortest Path First）\"></a>OSPF（Open Shortest Path First）</h3><p>OSPF通告信息中携带：每一个邻居路由器一个表项</p>\n<p>通告信息会传遍AS全部（通过泛洪）</p>\n<p>在IP数据报上直接传送OSPF报文 (而不是通过UDP和TCP)</p>\n<h4 id=\"LS算法\"><a href=\"#LS算法\" class=\"headerlink\" title=\"LS算法\"></a>LS算法</h4><ul>\n<li><p>LS 分组在网络中（一个AS内部）分发</p>\n</li>\n<li><p>全局网络拓扑、代价在每一个节点中都保持</p>\n</li>\n<li><p>路由计算采用Dijkstra算法</p>\n</li>\n</ul>\n<h4 id=\"OSPF高级特性\"><a href=\"#OSPF高级特性\" class=\"headerlink\" title=\"OSPF高级特性\"></a>OSPF高级特性</h4><ul>\n<li><p>安全: 所有的OSPF报文都是经过认证的 (防止恶意的攻击)</p>\n</li>\n<li><p>允许有多个代价相同的路径存在 (在RIP协议中只有一个)</p>\n</li>\n<li><p>对于每一个链路，对于不同的TOS有多重代价矩阵</p>\n<ul>\n<li><p>例如：卫星链路代价对于尽力而为的服务代价设置比较低，对实时服务代价设置的比较高</p>\n</li>\n<li><p>支持按照不同的代价计算最优路径，如：按照时间和延迟分别计算最优路径</p>\n</li>\n</ul>\n</li>\n<li><p>对单播和多播的集成支持：Multicast OSPF (MOSPF) 使用相同的拓扑数据库， 就像在OSPF中一样</p>\n</li>\n<li><p>在大型网络中支持层次性OSPF</p>\n</li>\n</ul>\n<h4 id=\"层次化的OSPF路由\"><a href=\"#层次化的OSPF路由\" class=\"headerlink\" title=\"层次化的OSPF路由\"></a>层次化的OSPF路由</h4><p>两个级别的层次性：本地，骨干</p>\n<ul>\n<li><p>链路状态通告仅仅在本地区域Area范围内进行</p>\n</li>\n<li><p>每一个节点拥有本地区域的拓扑信息。关于其他区域，知道去它的方向，通过区域边界路 由器（最短路径）</p>\n</li>\n</ul>\n<p>区域边界路由器：“汇总聚集”到自己区域内网络的距离，向其他区域边界路由器通告。</p>\n<p>骨干路由器：仅仅在骨干区域内，运行OSPF路由</p>\n<p>边界路由器：链接其他的AS</p>\n<h2 id=\"5-4-ISP之间的路由选择：BGP\"><a href=\"#5-4-ISP之间的路由选择：BGP\" class=\"headerlink\" title=\"5.4 ISP之间的路由选择：BGP\"></a>5.4 ISP之间的路由选择：BGP</h2><h3 id=\"层次路由与平面路由\"><a href=\"#层次路由与平面路由\" class=\"headerlink\" title=\"层次路由与平面路由\"></a>层次路由与平面路由</h3><h4 id=\"平面路由\"><a href=\"#平面路由\" class=\"headerlink\" title=\"平面路由\"></a>平面路由</h4><p>一个平面的路由</p>\n<ul>\n<li><p>一个网络中所有的路由器地位一样</p>\n</li>\n<li><p>通过LS，DV或者其他路由算法，所有路由器都要知道其他所有路由器（子网）如何走</p>\n</li>\n<li><p>所有路由器都在一个平面</p>\n</li>\n</ul>\n<p>平面路由的问题</p>\n<ul>\n<li><p>规模巨大的网络中，路由信息的存储、传输和计算代价巨大</p>\n<ul>\n<li><p>DV：距离矢量很大，且不能够收敛</p>\n</li>\n<li><p>LS：几百万个节点的LS分组泛洪传输，存储以及最短路径算法的计算</p>\n</li>\n</ul>\n</li>\n<li><p>管理问题</p>\n<ul>\n<li><p>不同的网络所有者希望按照自己的方式管理网络</p>\n</li>\n<li><p>希望对外隐藏自己网络的细节</p>\n</li>\n<li><p>当然，还希望和其它网络互联</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"层次路由\"><a href=\"#层次路由\" class=\"headerlink\" title=\"层次路由\"></a>层次路由</h4><p>层次路由：将互联网分成一个个AS（路由器区域）</p>\n<ul>\n<li><p>某个区域内的路由器集合，自治系统</p>\n</li>\n<li><p>一个AS用AS Number作为唯一标识</p>\n</li>\n<li><p>一个ISP可能包括一个或多个AS</p>\n</li>\n</ul>\n<p>路由就变成了两个层次路由：</p>\n<ul>\n<li><p>AS内部路由：同一个AS内路由器运行相同的路由协议</p>\n<ul>\n<li><p>内部网关协议</p>\n</li>\n<li><p>不同的AS可能运行着不同的内部网关协议</p>\n</li>\n<li><p>能够解决规模和管理问题</p>\n</li>\n<li><p>通常使用RIP，OSPF，IGRP</p>\n</li>\n<li><p>网关路由器：AS边缘路由器，可以连接到其他AS</p>\n</li>\n</ul>\n</li>\n<li><p>AS间路由</p>\n<ul>\n<li><p>外部网关系协议</p>\n</li>\n<li><p>解决AS之间的路由问题</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"层次路由的优点\"><a href=\"#层次路由的优点\" class=\"headerlink\" title=\"层次路由的优点\"></a>层次路由的优点</h4><p>解决的规模问题</p>\n<p>解决了管理问题</p>\n<h3 id=\"互联网AS间路由：BGP\"><a href=\"#互联网AS间路由：BGP\" class=\"headerlink\" title=\"互联网AS间路由：BGP\"></a>互联网AS间路由：BGP</h3><p>BGP（Border Gateway Protocol）自治区域间路由“事实上的标准”</p>\n<p>BGP提供给每个AS以下方法：</p>\n<ul>\n<li><p>eBGP：从相邻的AS那里获得子网可达信息</p>\n</li>\n<li><p>iBGP：将获得的子网可达信息传遍AS内部的路由器</p>\n</li>\n<li><p>根据子网可达信息和策略来决定到达子网的“好”路径</p>\n</li>\n</ul>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter5/image-149.png\"></p>\n<p>此处的连接均为逻辑上的连接（TCP连接）</p>\n<p>允许子网向互联网其他网络通告“我在这里”</p>\n<p>基于距离矢量算法（不仅仅是距离矢量，还包括到达各个目标网络的详细路径，能够避免简单的DV算法的路由环路问题</p>\n<h4 id=\"BGP基础\"><a href=\"#BGP基础\" class=\"headerlink\" title=\"BGP基础\"></a>BGP基础</h4><p>BGP会话：2个BGP路由器在一个半永久的TCP连接上交换BGP报文</p>\n<p>通告向不同目标子网前缀的路径</p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter5/image-148.png\"></p>\n<h4 id=\"BGP路由\"><a href=\"#BGP路由\" class=\"headerlink\" title=\"BGP路由\"></a>BGP路由</h4><p>基于策略的路由</p>\n<ul>\n<li><p>当一个网关路由器接收到了一个路由通告, 使用输入策略来接受或过滤</p>\n</li>\n<li><p>策略也决定了是否向它的别的邻居通告收到的这个路由信息</p>\n</li>\n</ul>\n<h3 id=\"BGP路径通告\"><a href=\"#BGP路径通告\" class=\"headerlink\" title=\"BGP路径通告\"></a>BGP路径通告</h3><p>路由器AS2.2c从AS3.3a接收到的AS3,X路由通告（通过eBGP）</p>\n<p>基于AS2的输入策略，AS2.2c决定接收AS3,X的通告，而且通过iBGP向所有路由器进行通告</p>\n<p>基于AS2的策略，AS2路由器2a通过二BGP向AS1.1c路由器通告AS2，AS3,X路由信息（路径上加上了 AS2自己作为AS序列的一跳</p>\n<p>网关路由器可能从多个eBGP 会话上获取有关一个子网X的多条路径：</p>\n<p>基于策略选择路径</p>\n<h3 id=\"BGP报文\"><a href=\"#BGP报文\" class=\"headerlink\" title=\"BGP报文\"></a>BGP报文</h3><p>使用TCP协议交换BGP报文</p>\n<p>OPEN: 打开TCP连接，认证发送方</p>\n<p>UPDATE: 通告新路径 (或者撤销原路径)</p>\n<p>KEEPALIVE：在没有更新时保持连接，也用于对 OPEN 请求确认</p>\n<p>NOTIFICATION: 报告以前消息的错误，也用来关闭连接 </p>\n<h3 id=\"BGP，OSPF，转发表表项\"><a href=\"#BGP，OSPF，转发表表项\" class=\"headerlink\" title=\"BGP，OSPF，转发表表项\"></a>BGP，OSPF，转发表表项</h3><p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter5/image-145.png\"></p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter5/image-144.png\"></p>\n<h3 id=\"BGP路径选择\"><a href=\"#BGP路径选择\" class=\"headerlink\" title=\"BGP路径选择\"></a>BGP路径选择</h3><p>路由器可能获得一个网络前缀的多个路径，路由器必须进行路径的选择，路由选择可以基于：</p>\n<ul>\n<li><p>本地偏好值属性：偏好策略决定</p>\n</li>\n<li><p>最短AS-PATH：AS的跳数</p>\n</li>\n<li><p>最佳的NEXT-HOP路由器：热土豆路由</p>\n</li>\n<li><p>附加的判据：使用BGP标示</p>\n</li>\n</ul>\n<h4 id=\"热土豆路由\"><a href=\"#热土豆路由\" class=\"headerlink\" title=\"热土豆路由\"></a>热土豆路由</h4><p>扔过来一个热土豆，不管三七二十一，直接扔给最近的人</p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter5/image-141.png\"></p>\n<ul>\n<li><p>2d通过iBGP获知，它可以通过2a或者2c到达X</p>\n</li>\n<li><p>热土豆策略：选择具备最小内部区域代价的网关作为往X的出口（如：2d选择2a，即使往X可能有比较多的AS跳数）：不要操心域间的代价！</p>\n</li>\n<li><p>(就是2c和2a都是网关路由器，2d到达2a的代价最小，因此给2a传递，尽管2c的整体跳数要小)</p>\n</li>\n</ul>\n<h4 id=\"通过路径通告执行策略\"><a href=\"#通过路径通告执行策略\" class=\"headerlink\" title=\"通过路径通告执行策略\"></a>通过路径通告执行策略</h4><p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter5/image-140.png\"></p>\n<p>假设一个ISP只想路由流量到/去往它的客户网络 (不想承载其他ISPs之间的流量，即不通告：不是去往我的客户，也不是来自我的客户)</p>\n<ul>\n<li><p>A 向B和C通告路径Aw</p>\n</li>\n<li><p>B选择不向C通告BAw：</p>\n<ul>\n<li><p>B从CBAw的路由上无法获得收益，因为C,A,w都不是B的客户</p>\n</li>\n<li><p>C从而无法获知 CBAw路径的存在：每个ISP感知到的 网络和真实不一致</p>\n</li>\n</ul>\n</li>\n<li><p>C可能会通过 CAw (而不是使用B)最终路由到w</p>\n</li>\n</ul>\n<h3 id=\"内部网关协议和外部网关协议\"><a href=\"#内部网关协议和外部网关协议\" class=\"headerlink\" title=\"内部网关协议和外部网关协议\"></a>内部网关协议和外部网关协议</h3><p>内部网关协议更加注重性能</p>\n<p>外部网关协议注重策略要大于性能（一个子网是否要将自己的路径信息转给外部的路径信息，从而让外部的子网的路由来使用自己的网络传输）</p>\n<ul>\n<li><p>政治策略：如不希望自己的流量被竞争公司使用</p>\n</li>\n<li><p>经济策略：如不希望非己方用户使用自己的子网的流量</p>\n</li>\n</ul>\n<p>策略：</p>\n<ul>\n<li><p>Inter-AS: 管理员需要控制通信路径，谁在使用它的网络进行数据传输；</p>\n</li>\n<li><p>Intra-AS: 一个管理者，所以无需策略：AS内部的各子网的主机尽可能地利用资源进行快速路由</p>\n</li>\n</ul>\n<p>规模：</p>\n<ul>\n<li><p>AS间路由必须考虑规模问题，以便支持全网的数据转发</p>\n</li>\n<li><p>AS内部路由规模不是一个大的问题</p>\n<ul>\n<li><p>如果AS 太大，可将此AS分成小的AS；规模可控</p>\n</li>\n<li><p>AS之间只不过多了一个点而已</p>\n</li>\n<li><p>或者AS内部路由支持层次性，层次性路由节约了表空间, 降低了 更新的数据流量</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>性能：</p>\n<ul>\n<li><p>Intra-AS: 关注性能 </p>\n</li>\n<li><p>Inter-AS: 策略可能比性能更重要</p>\n</li>\n</ul>\n<h2 id=\"5-5-SDN控制平面-TODO\"><a href=\"#5-5-SDN控制平面-TODO\" class=\"headerlink\" title=\"5.5 SDN控制平面 TODO\"></a>5.5 SDN控制平面 TODO</h2><h2 id=\"5-6-ICMP-因特网控制报文协议\"><a href=\"#5-6-ICMP-因特网控制报文协议\" class=\"headerlink\" title=\"5.6 ICMP: 因特网控制报文协议\"></a>5.6 ICMP: 因特网控制报文协议</h2><p>详见：<a href=\"https://devdiv.github.io/school/net/tcpip/netlayer/icmp.html#icmp%E7%89%B9%E6%80%A7\">因特网控制报文协议协议(ICMP) | School</a></p>\n","categories":[{"name":"计算机网络","slug":"计算机网络","count":8,"path":"api/categories/计算机网络.json"},{"name":"中科大","slug":"计算机网络/中科大","count":8,"path":"api/categories/计算机网络/中科大.json"}],"tags":[{"name":"计算机网络","slug":"计算机网络","count":8,"path":"api/tags/计算机网络.json"}]}