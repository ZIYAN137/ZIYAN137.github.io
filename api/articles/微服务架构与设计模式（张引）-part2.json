{"title":"微服务架构与设计模式（张引）_part2","slug":"微服务架构与设计模式（张引）-part2","date":"2025-03-17T15:51:06.000Z","updated":"2025-05-05T04:30:44.385Z","comments":true,"path":"api/articles/微服务架构与设计模式（张引）-part2.json","photos":[],"excerpt":"单体应用与微服务架构应用在软件架构设计中，单体应用和微服务架构是两种常见模式，各有优缺点。单体应用适合简单项目，开发、部署、测试和调试较为方便，但随着业务增长，维护和扩展变得困难。而微服务架构将系统拆分为多个独立服务，提升可扩展性和技术灵活性，但增加了开发、部署和测试的复杂度。本篇博客将介绍 单体应用与微服务架构的核心概念、优缺点及适用场景，帮助开发者在实际项目中做出合适的架构选择。","covers":null,"content":"<h1 id=\"单体应用与微服务架构应用\"><a href=\"#单体应用与微服务架构应用\" class=\"headerlink\" title=\"单体应用与微服务架构应用\"></a>单体应用与微服务架构应用</h1><p>在软件架构设计中，单体应用和微服务架构是两种常见模式，各有优缺点。单体应用适合简单项目，开发、部署、测试和调试较为方便，但随着业务增长，维护和扩展变得困难。而微服务架构将系统拆分为多个独立服务，提升可扩展性和技术灵活性，但增加了开发、部署和测试的复杂度。</p>\n<p>本篇博客将介绍 单体应用与微服务架构的核心概念、优缺点及适用场景，帮助开发者在实际项目中做出合适的架构选择。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"单体应用\"><a href=\"#单体应用\" class=\"headerlink\" title=\"单体应用\"></a>单体应用</h2><h3 id=\"什么是单体应用\"><a href=\"#什么是单体应用\" class=\"headerlink\" title=\"什么是单体应用\"></a>什么是单体应用</h3><p>只有一个主体的应用</p>\n<p>只包含一个可独立运行单元的软件，其包括了软件所有的组成部分，涵盖数据库、服务、用户界面等</p>\n<ul>\n<li><p>用户界面：用于呈现数据，以及接收用户的输入。有些适合用户界面也承担验证用户输入的数据是否合法的职责。</p>\n</li>\n<li><p>业务逻辑层：用于处理数据。业务逻辑层是单体应用的核心部分。在MVC+IService架构中，开发者可能将业务逻辑放置于Controller中，也可能放置于IService及其实现类中，具体取决于开发者的偏好和决策</p>\n</li>\n<li><p>数据访问层：用于访问数据库。数据访问层对访问数据库的方法进行了抽象，使业务逻辑层可以无视具体的数据库技术，从而专注于对数据的处理和存储。</p>\n</li>\n<li><p>数据库：用于存储数据。尽管单体数据并不经常使用嵌入式数据库而是使用独立运行的数据库，这些数据库与单体应用依然通常是一一对应的</p>\n</li>\n</ul>\n<h3 id=\"单体应用的优点与缺点\"><a href=\"#单体应用的优点与缺点\" class=\"headerlink\" title=\"单体应用的优点与缺点\"></a>单体应用的优点与缺点</h3><p>优点</p>\n<ul>\n<li><p>开发相对简单，尤其是对于相对简单的需求，或者在复杂项目的开始阶段</p>\n</li>\n<li><p>部署相对简单</p>\n</li>\n<li><p>测试相对容易</p>\n</li>\n<li><p>方便调试</p>\n</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li><p>难以解决复杂问题</p>\n</li>\n<li><p>很难将心疾俗引入到单体应用中</p>\n</li>\n<li><p>难以扩展</p>\n</li>\n<li><p>更新成本高</p>\n</li>\n</ul>\n<h2 id=\"微服务架构\"><a href=\"#微服务架构\" class=\"headerlink\" title=\"微服务架构\"></a>微服务架构</h2><h3 id=\"什么是微服务架构\"><a href=\"#什么是微服务架构\" class=\"headerlink\" title=\"什么是微服务架构\"></a>什么是微服务架构</h3><p>微服务架构将软件拆解为一系列独立运行的微服务，每个微服务都是一个可以独立运行的单元。</p>\n<blockquote>\n<p>比如电商平台的查看商品和购物结算是两个独立的微服务，查看商品的服务崩了也不会影响购物结算的微服务。</p>\n</blockquote>\n<h3 id=\"微服务架构的优点\"><a href=\"#微服务架构的优点\" class=\"headerlink\" title=\"微服务架构的优点\"></a>微服务架构的优点</h3><p>单体应用存在的一个问题是，随着时间推移，单体应用会变得太过于复杂，从而难以理解、开发和维护。</p>\n<p>微服务架构的“微”决定了微服务架构中的每一个服务都不是很复杂。</p>\n<p>所以微服务事实上为业务划分了边界</p>\n<p>这种边界有效地限制了变更的扩散范围，降低了变更的成本，不仅方便开发者更改业务的具体实现逻辑，还有助于开发者将新技术引入项目中，从而确保项目可持续地迭代演进。</p>\n<p>微服务架构容易进行扩展（需要“无状态性”）</p>\n<p>就是访问服务器的时候，服务器不知道你之前干了什么，它需要重新在数据库里面把数据再拿出来。</p>\n<p>因为服务器记不住你，所以你也不需要记住服务器。所以访问A服务器和访问B服务器就没有什么区别，因此我们可以开很多的服务器来弥补原有服务器资源的不足。</p>\n<p>每个微服务都可以单独更新（灰度上线）</p>\n<h3 id=\"微服务架构的缺点\"><a href=\"#微服务架构的缺点\" class=\"headerlink\" title=\"微服务架构的缺点\"></a>微服务架构的缺点</h3><p>单体应用最为重要的优点就是开发简单，而微服务架构的一大缺点就是开发比较复杂</p>\n<p>部署比较复杂</p>\n<p>测试比较复杂</p>\n<p>调试比较麻烦</p>\n<p>问题的复杂度可以作为采用单体应用架构还是微服务架构最有效的考察指标</p>\n","categories":[],"tags":[{"name":"微服务","slug":"微服务","count":3,"path":"api/tags/微服务.json"}]}