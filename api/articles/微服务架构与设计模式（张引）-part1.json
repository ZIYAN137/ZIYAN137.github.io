{"title":"微服务架构与设计模式（张引）_part1","slug":"微服务架构与设计模式（张引）-part1","date":"2025-03-17T15:39:34.000Z","updated":"2025-05-05T04:30:44.385Z","comments":true,"path":"api/articles/微服务架构与设计模式（张引）-part1.json","photos":[],"excerpt":"容器、容器编排、容器化开发在软件开发中，环境配置繁琐、兼容性问题和资源浪费是常见挑战。虚拟化技术虽能隔离环境，但传统虚拟机启动慢、占用资源多。Docker 作为轻量级虚拟化方案，解决了这些问题，使应用部署更高效。本篇博客介绍 Docker 的基本概念、容器管理、数据库镜像使用，以及 Docker Compose 容器编排，并探讨 如何使用 Dockerfile 进行容器化开发，帮助开发者高效构建和部署应用。","covers":null,"content":"<h1 id=\"容器、容器编排、容器化开发\"><a href=\"#容器、容器编排、容器化开发\" class=\"headerlink\" title=\"容器、容器编排、容器化开发\"></a>容器、容器编排、容器化开发</h1><p>在软件开发中，环境配置繁琐、兼容性问题和资源浪费是常见挑战。虚拟化技术虽能隔离环境，但传统虚拟机启动慢、占用资源多。Docker 作为轻量级虚拟化方案，解决了这些问题，使应用部署更高效。</p>\n<p>本篇博客介绍 Docker 的基本概念、容器管理、数据库镜像使用，以及 Docker Compose 容器编排，并探讨 如何使用 Dockerfile 进行容器化开发，帮助开发者高效构建和部署应用。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"虚拟化、容器、docker\"><a href=\"#虚拟化、容器、docker\" class=\"headerlink\" title=\"虚拟化、容器、docker\"></a>虚拟化、容器、docker</h1><h2 id=\"为什么要虚拟化？\"><a href=\"#为什么要虚拟化？\" class=\"headerlink\" title=\"为什么要虚拟化？\"></a>为什么要虚拟化？</h2><p>在电脑上安装很多软件是非常危险的事情</p>\n<p>所以在电脑上安装虚拟机，在虚拟机上运行软件</p>\n<p>在虚拟机中的一切操作，都不会对主机产生影响</p>\n<p>虚拟机非常容易进行备份与复制，一台虚拟机上安装完环境后，然后复制几份运行软件即可</p>\n<h2 id=\"虚拟机（第一代虚拟机）的问题\"><a href=\"#虚拟机（第一代虚拟机）的问题\" class=\"headerlink\" title=\"虚拟机（第一代虚拟机）的问题\"></a>虚拟机（第一代虚拟机）的问题</h2><ul>\n<li><p>开关机比较慢</p>\n</li>\n<li><p>占用资源（内存、硬盘）比较多</p>\n</li>\n<li><p>虚拟机要自己计算大概要多少内存，操作系统也要占一定量的内存和存储</p>\n</li>\n</ul>\n<h2 id=\"如何解决问题？第二代虚拟机（docker）\"><a href=\"#如何解决问题？第二代虚拟机（docker）\" class=\"headerlink\" title=\"如何解决问题？第二代虚拟机（docker）\"></a>如何解决问题？第二代虚拟机（docker）</h2><p>一个直接用本机操作系统的虚拟机， docker is process</p>\n<h3 id=\"为什么要开机？如何做到免开机？\"><a href=\"#为什么要开机？如何做到免开机？\" class=\"headerlink\" title=\"为什么要开机？如何做到免开机？\"></a>为什么要开机？如何做到免开机？</h3><p>主机上已经运行着一个linux系统内核，那么我们虚拟机就不用自己再开一个内核，而是直接调用物理机的linux系统内核。</p>\n<p>装了WSL后，就相当于windows里面有了一个linux内核，再装docker，docker虚拟机就可以直接运行在wsl的内核上了。</p>\n<h3 id=\"什么东西在占用内存？\"><a href=\"#什么东西在占用内存？\" class=\"headerlink\" title=\"什么东西在占用内存？\"></a>什么东西在占用内存？</h3><p>操作系统在占用内存。既然现在不再模拟操作系统了，那么这一份内存占用也不存在了。物理机只需要提供应用程序所占的那份内存即可。</p>\n<h3 id=\"什么东西在占用存储？\"><a href=\"#什么东西在占用存储？\" class=\"headerlink\" title=\"什么东西在占用存储？\"></a>什么东西在占用存储？</h3><p>和内存一样，现在没有模拟的操作系统。只需根据部署的业务占用物理机的存储即可。</p>\n<h2 id=\"docker操作\"><a href=\"#docker操作\" class=\"headerlink\" title=\"docker操作\"></a>docker操作</h2><p><a href=\"https://gitcode.com/zhangyin_gitcode/e-delivery\">https://gitcode.com/zhangyin_gitcode/e-delivery</a></p>\n<p>打开PowerShell（Windows）或终端（Linux/macOS），执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login -u cn-north-4@0QF3ILCDJYJ3JKCANIA6 -p e6e87d9fdbcc5a04dcca6bad174028ab91b90fc566f1bc357f78d98ff84cbff1 swr.cn-north-4.myhuaweicloud.com</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以从课程的仓库里拉虚拟机了</p>\n<p>然后拉取镜像（用-it运行一个容器的bash 之后可以用exit退出这个bash）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Ubuntu22.04</span></span><br><span class=\"line\">docker run -it --<span class=\"built_in\">rm</span> swr.cn-notrth-4.myhuaweicloud.com/swr-devadv/ubuntu:22.04 /bin/bash</span><br><span class=\"line\"><span class=\"comment\">#openeuler</span></span><br><span class=\"line\">docker run -it --<span class=\"built_in\">rm</span> swr.cn-notrth-4.myhuaweicloud.com/swr-devadv/openeuler:latest /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>然后用以下命令查看docker里面跑的确实是ubuntu或openeuler</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /etc/os-release</span><br></pre></td></tr></table></figure>\n\n<p>因为我们装docker就是为了在上面运行一些软件，所以可以直接拉一个已经装好软件的docker。比如我们可以拉一个已经装好MySQL的docker镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --<span class=\"built_in\">rm</span> --name mysql-demo -e MYSQL_ROOT_PASSWORD=Pass@word -p 13306:3306 -d swr.cn-north-4.myhuaweicloud.com/swr-devadv/mysql:8.0</span><br></pre></td></tr></table></figure>\n\n<p>我们可以使用<code>docker ps -a</code>来列出所有容器，接着可以使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mysql-demo /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>来进入我们的mysql-demo容器。我们可以使用一些数据库工具（如JB家的data grip）来连一下mysql。</p>\n<p>如果不想要了，可以直接使用docker rm -f mysql-demo来强制移除它。</p>\n<p>同样也可以用类似的命令启动SQLServer、MongoDB等现成的docker</p>\n<h2 id=\"容器的优缺点\"><a href=\"#容器的优缺点\" class=\"headerlink\" title=\"容器的优缺点\"></a>容器的优缺点</h2><p>优点</p>\n<ul>\n<li><p>启动快</p>\n</li>\n<li><p>内存占用小</p>\n</li>\n<li><p>硬盘占用小</p>\n</li>\n<li><p>几乎可以实现“安装一切”</p>\n</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li><p>据说隔离性/安全性不如虚拟机</p>\n</li>\n<li><p>容易膨胀</p>\n</li>\n</ul>\n<h1 id=\"容器编排\"><a href=\"#容器编排\" class=\"headerlink\" title=\"容器编排\"></a>容器编排</h1><p>一台docker虚拟机就是容器，容器的硬盘就是镜像</p>\n<p>如果我们要跑一个程序，需要一个容器跑java主程序，一个容器跑MySQL，总共需要开两个容器。此时，多个容器一个个开过去很麻烦，所以容器编排应运而生</p>\n<p>容器编排就是对多个容器进行管理</p>\n<p>我们创建一个文件<code>docker-compose.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#docker-compose.yml</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">gitea:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">swr.cn-north-4.myhuaweicloud.com/swr-devadv/gitea:1.18.1</span></span><br><span class=\"line\">    <span class=\"attr\">contianer_name:</span> <span class=\"string\">gitea</span></span><br><span class=\"line\">    <span class=\"attr\">enviroment:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">USER_UID=1000</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">USER_GID=1000</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">GITEA__database__DB_TYPE=mysql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">GITEA__database__HOST=db:3306</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">GITEA__database__NAME=gitea</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">GITEA__database__USER=gitea</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">GITEA__database__PASSWD=gitea</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">gitea</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">\"3000:3000\"</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">\"222:22\"</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">db</span></span><br><span class=\"line\">      </span><br><span class=\"line\">  <span class=\"attr\">db:</span> </span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">swr.cn-north-4.myhuaweicloud.com/swr-devadv/mysql:8.0</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">MYSQL_ROOT_PASSWORD=gitea</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">MYSQL</span> <span class=\"string\">_uSER=gitea</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">MYSQL_PASSWORD=gitea</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">MYSQL_DATABASE=gitea</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">gitea</span></span><br></pre></td></tr></table></figure>\n\n<p>容器编排相当于自带了一个DNS，直接把server依赖的db替换为事实上的db</p>\n<p>然后<code>docker compose up</code></p>\n<p>它就会去拉取镜像并且初始化容器。</p>\n<p>之后可以用localhost:3000来访问gitea，一个轻量化的git服务</p>\n<p>如果想要关闭编排的所有docker，可以使用<code>docker compose down</code></p>\n<h1 id=\"容器化开发\"><a href=\"#容器化开发\" class=\"headerlink\" title=\"容器化开发\"></a>容器化开发</h1><p>创建一个文件夹demo，用VS Code打开该文件夹</p>\n<p>创建文件docker-compose.yml, 创建文件夹server</p>\n<p>在server文件夹下执行<code>cjpm init</code>新建一个Cangjie项目，然后打开<code>cjpm.toml</code>装上依赖的包</p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[dependencies]</span></span><br><span class=\"line\">  <span class=\"attr\">tea</span> = { git = <span class=\"string\">\"https://gitcode.com/yishengTH/tea.git\"</span>, branch = <span class=\"string\">\"cj-0.53.13\"</span> }</span><br></pre></td></tr></table></figure>\n\n<p>然后使用<code>cjpm update</code>手动更新一下。</p>\n<p>之后用VS Code打开<code>server</code>文件夹，才能正常地编写Cangjie程序</p>\n<figure class=\"highlight plaintext\"><figcaption><span>text</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// main.cj</span><br><span class=\"line\">package server</span><br><span class=\"line\"></span><br><span class=\"line\">import tea.*</span><br><span class=\"line\"></span><br><span class=\"line\">main(): Int64 {</span><br><span class=\"line\">    let app = Tea.default()</span><br><span class=\"line\"></span><br><span class=\"line\">    app.get(\"/\") {</span><br><span class=\"line\">        context: TeaContext =&gt;</span><br><span class=\"line\">        context.string(200, \"hello tea\")</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    app.run(8080) // 从此处开始阻塞，之后的代码不再执行</span><br><span class=\"line\">    </span><br><span class=\"line\">    return 0</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>cjpm run</code>运行我们的服务器，之后访问localhost:8080就可以看见hello tea了</p>\n<p>那么，这个程序已经在本机上运行起来了，我们要怎么把他在容器里面运行呢？</p>\n<p>在<code>server</code>文件夹下创建<code>Dockerfile</code>文件</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dockerfile用于编译生成镜像</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 里面是一个装有Cangjie环境的Ubuntu，我们可以在上面编译和运行Cangjie程序</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> swr.cn-north-<span class=\"number\">4</span>.myhuaweicloud.com/swr-devadv/cangjie:<span class=\"number\">0.53</span>.<span class=\"number\">18</span>-<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\"># 相当于自动把app文件夹创建出来，并进入app文件夹</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置环境变量，也就是envsetup.sh实际在干的事情</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> CANGJIE_HOME=<span class=\"string\">\"/root/cangjie\"</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> PATH=<span class=\"string\">\"/root/cangjie/bin:/root/cangjie/tools/bin:/root/.cjpm/bin\"</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> LD_LIBRARY_PATH=<span class=\"string\">\"/root/cangjie/runtime/lib/linux_x86_64_llvm\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将物理机的当前目录复制到容器的当前目录，</span></span><br><span class=\"line\"><span class=\"comment\"># 前面这个点是物理机的项目目录（docker-compose中的context）</span></span><br><span class=\"line\"><span class=\"comment\"># 后面那个点是app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . .</span></span><br><span class=\"line\"><span class=\"comment\"># 进入容器的app/server</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> server/</span></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖并编译</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> cjpm update</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> cjpm build</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行编译完的可执行程序</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">\"/app/server/target/release/bin/main\"</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>之后返回demo文件夹下的<code>docker-compose.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3.4'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">sercices:</span></span><br><span class=\"line\">  <span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">server</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span></span><br><span class=\"line\">      <span class=\"comment\"># 当前的项目位置就是docker-compose.yml所在的位置</span></span><br><span class=\"line\">      <span class=\"attr\">context:</span> <span class=\"string\">.</span></span><br><span class=\"line\">      <span class=\"comment\"># 将Dockerfile编译生成的镜像作为容器打开</span></span><br><span class=\"line\">      <span class=\"attr\">dockerfile:</span> <span class=\"string\">server/Dockerfile</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">\"35210:8080\"</span></span><br></pre></td></tr></table></figure>\n\n<p>之后就可以<code>docker compose up</code>运行一下试试效果了<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.452ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.919ex\" height=\"2.149ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 3500 950\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">￣</text></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(1000,0)\"><g data-mml-node=\"mo\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">︶</text></g></g><g data-mml-node=\"mi\" transform=\"translate(2000,0)\"><text data-variant=\"italic\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\" font-style=\"italic\">￣</text></g><g data-mml-node=\"mo\" transform=\"translate(3000,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g></g></g></svg></mjx-container>)</p>\n<p>通过使用Dockerfile，我们可以轻松的在一个项目里用多种编程语言进行混合开发，每门语言都只干自己适合干的事情，每门语言单独一个Dockerfile 。</p>\n","categories":[],"tags":[{"name":"微服务","slug":"微服务","count":3,"path":"api/tags/微服务.json"}]}