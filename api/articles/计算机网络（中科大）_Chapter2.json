{"title":"计算机网络（中科大）_Chapter2","slug":"计算机网络（中科大）_Chapter2","date":"2025-03-31T07:08:36.000Z","updated":"2025-05-05T04:30:44.385Z","comments":true,"path":"api/articles/计算机网络（中科大）_Chapter2.json","photos":[],"excerpt":"第二章 应用层计算机网络中的应用层是与用户直接交互的层级，提供各种网络服务的基础。应用层协议种类繁多，它们是实现网络通信的关键，涵盖了从电子邮件、网页浏览到即时通讯、文件传输等众多应用。无论是通过客户端-服务器模式，还是对等（P2P）模式，应用层都为各种不同类型的网络应用提供了支持。本篇博客将深入探讨应用层的原理与常见协议，涵盖包括HTTP、FTP、SMTP、DNS等网络协议的工作原理，以及它们如何实现不同的网络服务。此外，还将介绍如何通过Socket编程实现基于TCP和UDP的网络通信，为读者提供理解和实践的基础。","covers":["/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/Cover.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-25.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-26.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-27.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-28.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-29.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-44.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-43.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-42.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-34.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-41.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-40.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-39.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-38.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-35.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-32.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-30.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-36.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-33.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-37.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-31.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-56.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-57.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-54.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-53.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-58.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-59.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-49.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-55.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-48.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-47.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-51.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-45.png","/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-50.png"],"content":"<h1 id=\"第二章-应用层\"><a href=\"#第二章-应用层\" class=\"headerlink\" title=\"第二章 应用层\"></a>第二章 应用层</h1><p>计算机网络中的应用层是与用户直接交互的层级，提供各种网络服务的基础。应用层协议种类繁多，它们是实现网络通信的关键，涵盖了从电子邮件、网页浏览到即时通讯、文件传输等众多应用。无论是通过客户端-服务器模式，还是对等（P2P）模式，应用层都为各种不同类型的网络应用提供了支持。</p>\n<p>本篇博客将深入探讨应用层的原理与常见协议，涵盖包括HTTP、FTP、SMTP、DNS等网络协议的工作原理，以及它们如何实现不同的网络服务。此外，还将介绍如何通过Socket编程实现基于TCP和UDP的网络通信，为读者提供理解和实践的基础。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/Cover.png\"></p>\n<p>本章三个部分：原理、实例、编程</p>\n<p>同时，应用层也是协议种类最多的一层</p>\n<p>一些网络应用的例子：</p>\n<p>E-mail Web 文本消息 远程登录 P2P文件共享 即时通信 多用户网络游戏 流媒体(youTube,Hulu, Netflix) Internet电话 实时电视会议 搜索 。。。</p>\n<h2 id=\"2-1-应用层原理\"><a href=\"#2-1-应用层原理\" class=\"headerlink\" title=\"2.1 应用层原理\"></a>2.1 应用层原理</h2><p>可能的应用架构：</p>\n<p>客户端-服务器模式（Client/Service）</p>\n<p>对等模式（P2P：Peer to Peer）</p>\n<p>混合体</p>\n<h3 id=\"客户端-服务器模式\"><a href=\"#客户端-服务器模式\" class=\"headerlink\" title=\"客户端-服务器模式\"></a>客户端-服务器模式</h3><p>可扩展性差，达到一定阈值时性能断崖性下降</p>\n<h4 id=\"服务器：\"><a href=\"#服务器：\" class=\"headerlink\" title=\"服务器：\"></a>服务器：</h4><ul>\n<li><p>一直运行</p>\n</li>\n<li><p>固定的IP地址和周知的端口号（约定）</p>\n</li>\n<li><p>扩展性；服务器场</p>\n</li>\n</ul>\n<h4 id=\"客户端：\"><a href=\"#客户端：\" class=\"headerlink\" title=\"客户端：\"></a>客户端：</h4><ul>\n<li><p>主动与服务器通信</p>\n</li>\n<li><p>与互联网有间歇性的连接</p>\n</li>\n<li><p>可能是动态IP地址</p>\n</li>\n<li><p>不直接与其他客户端通信</p>\n</li>\n</ul>\n<h3 id=\"P2P模式\"><a href=\"#P2P模式\" class=\"headerlink\" title=\"P2P模式\"></a>P2P模式</h3><ul>\n<li><p>几乎没有一直在运行的服务器</p>\n</li>\n<li><p>任意端系统之间可以进行通信</p>\n</li>\n<li><p>每个节点既是客户端又是服务器（自扩展性——新的peer会带来新的服务和新的请求</p>\n</li>\n<li><p>参与的主机间歇性的连接且可以改变IP地址（但是会难以管理）</p>\n</li>\n</ul>\n<h3 id=\"混合体\"><a href=\"#混合体\" class=\"headerlink\" title=\"混合体\"></a>混合体</h3><h4 id=\"Napster\"><a href=\"#Napster\" class=\"headerlink\" title=\"Napster\"></a>Napster</h4><p>用于分发MP3音乐</p>\n<p>文件搜索：集中</p>\n<p>主机在中心服务器上注册资源、查询资源位置</p>\n<p>文件传输：P2P</p>\n<p><del>但是因为侵权被拔插头了</del></p>\n<h4 id=\"即时通信\"><a href=\"#即时通信\" class=\"headerlink\" title=\"即时通信\"></a>即时通信</h4><p>在线检测：集中</p>\n<p>当用户上线时，向中心服务器注册其IP地址</p>\n<p>用户与中心服务器联系，以找到其在线好友的IP地址</p>\n<p>用户间聊天：P2P</p>\n<h3 id=\"进程通信\"><a href=\"#进程通信\" class=\"headerlink\" title=\"进程通信\"></a>进程通信</h3><p>在同一主机内，使用进程间通信机制进行通信（详见OS）</p>\n<p>不同主机之间，通过交换报文（Message）来通信</p>\n<p>客户端进程：发起通信的进程</p>\n<p>服务器进程：等待连接的进程</p>\n<blockquote>\n<p>P2P架构中也有客户端进程和服务器进程之分</p>\n</blockquote>\n<h3 id=\"分布式进程通信需要解决的问题\"><a href=\"#分布式进程通信需要解决的问题\" class=\"headerlink\" title=\"分布式进程通信需要解决的问题\"></a>分布式进程通信需要解决的问题</h3><h4 id=\"问题1：进程的标识和寻址问题（服务用户）\"><a href=\"#问题1：进程的标识和寻址问题（服务用户）\" class=\"headerlink\" title=\"问题1：进程的标识和寻址问题（服务用户）\"></a>问题1：进程的标识和寻址问题（服务用户）</h4><p>进程为了接收报文，必须有一个标识，即SAP（发送也需要）</p>\n<ul>\n<li><p>主机：唯一的32位IP地址</p>\n</li>\n<li><p>所采用的传输层协议：TCP or UDP</p>\n</li>\n<li><p>端口号<em>port number</em></p>\n</li>\n</ul>\n<p>一些知名端口：HTTP：TCP 80  Mail：TCP 25  ftp：TCP 2</p>\n<p>一个进程：用IP+Port表示的端节点</p>\n<p>本质上，一对主机进程之间的通信由2个端节点构成</p>\n<h4 id=\"问题2：传输层-应用层提供的服务是如何（服务）\"><a href=\"#问题2：传输层-应用层提供的服务是如何（服务）\" class=\"headerlink\" title=\"问题2：传输层-应用层提供的服务是如何（服务）\"></a>问题2：传输层-应用层提供的服务是如何（服务）</h4><p>位置：层间界面的SAP（TCP/IP：socket）</p>\n<p>形式：应用程序接口API（TCP/IP：socket API）</p>\n<h5 id=\"需要穿过层间的信息\"><a href=\"#需要穿过层间的信息\" class=\"headerlink\" title=\"需要穿过层间的信息\"></a>需要穿过层间的信息</h5><p>层间接口必须要携带的信息</p>\n<ul>\n<li><p>要传输的报文（对本层来说是SDU）</p>\n</li>\n<li><p>谁传的：本应用的进程标识：IP+TCP（UDP）端口</p>\n</li>\n<li><p>传给谁：对方的应用进程的标识：对方的IP+TCP（UDP）端口</p>\n</li>\n</ul>\n<p>传输层实体（TCP或UDP实体）根据这些信息进行TCP报文段（UDP数据报）的封装</p>\n<ul>\n<li><p>源端口号，目标端口号，数据等</p>\n</li>\n<li><p>将IP地址往下交给IP实体，用于封装IP数据报，源IP，目标IP</p>\n</li>\n</ul>\n<h5 id=\"层间信息的代表\"><a href=\"#层间信息的代表\" class=\"headerlink\" title=\"层间信息的代表\"></a>层间信息的代表</h5><p>如果Socket API每次传输报文，都携带如此多的信息（传什么，谁传的，传给谁），太繁琐了，不便于管理</p>\n<p>因此我们用socket—— 一个整数来标识通信的双方或单方。就像OS打开文件返回的fd一样。</p>\n<blockquote>\n<p>socket是本地意义上的，对方不知道你的socket</p>\n</blockquote>\n<ol>\n<li>TCP socket</li>\n</ol>\n<p>对于使用面向连接服务（TCP）的应用而言，socket是4元组的一个具有本地意义的标示</p>\n<p>4元组：(源IP，源port，目标IP，目标port)</p>\n<p>应用使用这个标示，与远程的应用进程通信。不必在每一个报文的发送都要指定该4元组 。</p>\n<p>用来表示通信关系。</p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-25.png\"></p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-26.png\"></p>\n<ul>\n<li>UDP socket</li>\n</ul>\n<p>对于使用无连接服务（UDP）的应用而言，socket是2元组的一个具有本地意义的标示</p>\n<p>2元组：IP，port （本地指定）</p>\n<p>UDP socket是socket所在主机的IP地址和端口号，与数据传输的方向无关，可以既是发送端，也可以是接收端。</p>\n<p>发送报文时，需要指定对方的IP和port</p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-27.png\"></p>\n<p>Socket</p>\n<p>对应用层来说相当传送门，屏蔽了下层的细节</p>\n<p>详见传输层</p>\n<h4 id=\"问题3：如何使用传输层提供的服务，实现应用进程之间的报文交换，实现应用（用户使用服务）\"><a href=\"#问题3：如何使用传输层提供的服务，实现应用进程之间的报文交换，实现应用（用户使用服务）\" class=\"headerlink\" title=\"问题3：如何使用传输层提供的服务，实现应用进程之间的报文交换，实现应用（用户使用服务）\"></a>问题3：如何使用传输层提供的服务，实现应用进程之间的报文交换，实现应用（用户使用服务）</h4><p>定义应用层协议：报文形式、解释、时许等</p>\n<p>编制程序，使用OS提供的API，调用网络基础设施一共通信服务传报文，实现应用时许等</p>\n<p>应用层协议定义了在不同的端系统上的应用进程如何相互交换报文：</p>\n<ul>\n<li><p>交换的报文类型:请求和应答报文</p>\n</li>\n<li><p>各种报文类型的语法:报文中的各个字段及其描述</p>\n</li>\n<li><p>字段的语义:即字段取值的含义</p>\n</li>\n<li><p>进程何时、如何发送报文及对报文进行响应的规则</p>\n</li>\n</ul>\n<p>应用协议仅仅是应用的一个组成部分</p>\n<p>应用协议分为开放协议和私有协议</p>\n<p>公开协议：由RFC文档定义。允许互操作。如HTTP, SMTP。</p>\n<p>专用（私有）协议：协议不公开。如：Skype。</p>\n<h3 id=\"应用需要传输层提供什么样的服务？如何描述传输层的服务？\"><a href=\"#应用需要传输层提供什么样的服务？如何描述传输层的服务？\" class=\"headerlink\" title=\"应用需要传输层提供什么样的服务？如何描述传输层的服务？\"></a>应用需要传输层提供什么样的服务？如何描述传输层的服务？</h3><p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-28.png\"></p>\n<h4 id=\"数据丢失率\"><a href=\"#数据丢失率\" class=\"headerlink\" title=\"数据丢失率\"></a>数据丢失率</h4><p>有些应用要求完全可靠，有些应用能容忍一定比例的丢失</p>\n<h4 id=\"延迟\"><a href=\"#延迟\" class=\"headerlink\" title=\"延迟\"></a>延迟</h4><p>一些应用出于有效性考虑，对数据传输有严格的时间限制，比如打游戏</p>\n<h4 id=\"吞吐\"><a href=\"#吞吐\" class=\"headerlink\" title=\"吞吐\"></a>吞吐</h4><p>一些应用（如多媒体）必须需要最小限度的吞吐，从而使得应用能够有效运转</p>\n<p>一些应用能充分利用可供使用的吞吐(弹性应用)</p>\n<h4 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h4><p>机密性完整性可认证性</p>\n<h3 id=\"Internet-传输层提供的服务\"><a href=\"#Internet-传输层提供的服务\" class=\"headerlink\" title=\"Internet 传输层提供的服务\"></a>Internet 传输层提供的服务</h3><p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-29.png\"></p>\n<p>TCP：</p>\n<ul>\n<li><p>可靠的传输服务</p>\n</li>\n<li><p>流量控制</p>\n</li>\n<li><p>拥塞控制</p>\n</li>\n<li><p>不能提供的服务：时间保证、最小吞吐保证和安全</p>\n</li>\n<li><p>面向连接</p>\n</li>\n<li></li>\n</ul>\n<p>UDP</p>\n<ul>\n<li><p>不可靠数据传输</p>\n</li>\n<li><p>不提供的服务：可靠， 流量控制、拥塞控制、 时间、带宽保证、建立 连接</p>\n</li>\n</ul>\n<p>UDP存在的必要性</p>\n<p>能够区分不同的进程，而IP服务不能：在IP提供的主机到主机端到端功能的基础上，区分了主机的应用进程</p>\n<p>无需建立连接，省去了建立连接时间，适合事务性的应用</p>\n<p>不做可靠性的工作，例如检错重发，适合那些对实时性要求比较高而对正确性要求不高的应用：因为为了实现可靠性(准确性、保序等)，必须付出时间代价(检错重发)</p>\n<p>没有拥塞控制和流量控制，应用能够按照设定的速度发送数据</p>\n<p>而在TCP上面的应用，应用发送数据的速度和主机向网络发送的实际速度是不一致的，因为有流量控制和拥塞控制</p>\n<h3 id=\"安全TCP：\"><a href=\"#安全TCP：\" class=\"headerlink\" title=\"安全TCP：\"></a>安全TCP：</h3><p>详见第八章</p>\n<h2 id=\"2-2-Web-HTTP\"><a href=\"#2-2-Web-HTTP\" class=\"headerlink\" title=\"2.2 Web & HTTP\"></a>2.2 Web &amp; HTTP</h2><h3 id=\"术语：\"><a href=\"#术语：\" class=\"headerlink\" title=\"术语：\"></a>术语：</h3><p>Web页：由一些对象组成</p>\n<p>Web页含有一个基本的HTML文件，该基本HTML文件又包含若干对象的引用（链接）</p>\n<p>通过URL对每个对象进行引用（访问协议，用户名，口令字，端口等）</p>\n<p>URL格式：</p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-44.png\"></p>\n<h3 id=\"HTTP协议概况\"><a href=\"#HTTP协议概况\" class=\"headerlink\" title=\"HTTP协议概况\"></a>HTTP协议概况</h3><p>HTTP：HyperText Transfer Protocol</p>\n<p>客户端/服务器模式</p>\n<h4 id=\"使用TCP\"><a href=\"#使用TCP\" class=\"headerlink\" title=\"使用TCP\"></a>使用TCP</h4><ol>\n<li><p>客户发起一个与服务器的TCP连接（建立socket）端口号为80</p>\n</li>\n<li><p>服务器接受客户的TCP连接</p>\n</li>\n<li><p>在浏览器（HTTP客户端）与Web服务器（HTTP服务器）交换HTTP报文</p>\n</li>\n<li><p>TCP连接关闭</p>\n</li>\n</ol>\n<h4 id=\"HTTP是无状态的\"><a href=\"#HTTP是无状态的\" class=\"headerlink\" title=\"HTTP是无状态的\"></a>HTTP是无状态的</h4><p>服务器并不维护关于客户的任何信息</p>\n<blockquote>\n<p>维护状态的协议很复杂！ </p>\n<p>必须维护历史信息(状态)</p>\n<p>如果服务器/客户端死机，它们的状态信息可能不一致， 二者的信息必须是一致</p>\n<p>无状态的服务器能够支持更多的客户端</p>\n</blockquote>\n<h3 id=\"HTTP连接\"><a href=\"#HTTP连接\" class=\"headerlink\" title=\"HTTP连接\"></a>HTTP连接</h3><h4 id=\"非持久HTTP\"><a href=\"#非持久HTTP\" class=\"headerlink\" title=\"非持久HTTP\"></a>非持久HTTP</h4><p>c-&gt;s: TCP建立连接</p>\n<p>c&lt;-s: TCP连接建立确认</p>\n<p>c-&gt;s: http请求报文</p>\n<p>c&lt;-s: http响应报文，关闭TCP连接</p>\n<p>c: 客户端接收到含html文件的响应报文，检查、显示html</p>\n<p>然后重复以上步骤</p>\n<h4 id=\"持久HTTP\"><a href=\"#持久HTTP\" class=\"headerlink\" title=\"持久HTTP\"></a>持久HTTP</h4><p>非持久的HTTP有以下缺点：</p>\n<ul>\n<li><p>每个对象要2个RTT</p>\n</li>\n<li><p>操作系统必须为每个TCP连接分配资源</p>\n</li>\n<li><p>但浏览器通常打开并行TCP连接，以获取引用对象</p>\n</li>\n</ul>\n<p>所以整出来个持久HTTP：服务器在发送响应后，仍保持TCP连接</p>\n<h5 id=\"非流水线方式的：\"><a href=\"#非流水线方式的：\" class=\"headerlink\" title=\"非流水线方式的：\"></a>非流水线方式的：</h5><p>客户端只能在收到前一个响应后，才能发出新的请求</p>\n<p>每个引用对象花费一个RTT</p>\n<h5 id=\"流水线方式的：\"><a href=\"#流水线方式的：\" class=\"headerlink\" title=\"流水线方式的：\"></a>流水线方式的：</h5><p>HTTP1.1默认模式</p>\n<p>和CPU的流水线类似，并行地提交请求和接收响应</p>\n<h3 id=\"响应时间模型\"><a href=\"#响应时间模型\" class=\"headerlink\" title=\"响应时间模型\"></a>响应时间模型</h3><p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-43.png\"></p>\n<p>往返时间<em>Round-Trip Time</em>：一个小的分组从客户端到服务器，在回到客户端的时间（传输时间忽略）</p>\n<p>响应时间：</p>\n<p>+ 一个RTT用来发起TCP连接</p>\n<p>+ 一个RTT用来HTPP请求并等待HTTP响应</p>\n<p>+ 文件传输时间</p>\n<p>= 2个RTT+传输时间</p>\n<h3 id=\"HTTP请求报文\"><a href=\"#HTTP请求报文\" class=\"headerlink\" title=\"HTTP请求报文\"></a>HTTP请求报文</h3><p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-42.png\"></p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-34.png\"></p>\n<p>报文是ASCII格式的（人能阅读）</p>\n<ul>\n<li><p>请求行</p>\n</li>\n<li><p>首部行</p>\n</li>\n<li><p>空白行</p>\n</li>\n<li><p>数据主体</p>\n</li>\n</ul>\n<p>请求行命令：详见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods\">HTTP 请求方法 - HTTP | MDN</a></p>\n<h3 id=\"HTTP响应报文\"><a href=\"#HTTP响应报文\" class=\"headerlink\" title=\"HTTP响应报文\"></a>HTTP响应报文</h3><p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-41.png\"></p>\n<ul>\n<li><p>状态行</p>\n</li>\n<li><p>首部行</p>\n</li>\n<li><p>空白行</p>\n</li>\n<li><p>数据主体，如请求的HTML文件</p>\n</li>\n</ul>\n<p>HTTP响应状态码：详见<a href=\"https://www.runoob.com/http/http-status-codes.html\">HTTP 状态码 | 菜鸟教程</a></p>\n<h3 id=\"Cookies\"><a href=\"#Cookies\" class=\"headerlink\" title=\"Cookies\"></a>Cookies</h3><p>用户-服务器状态</p>\n<h4 id=\"如何存储Cookie：\"><a href=\"#如何存储Cookie：\" class=\"headerlink\" title=\"如何存储Cookie：\"></a>如何存储Cookie：</h4><ol>\n<li><p>HTTP响应报文中的Cookie头：访问一个网站时，服务器会在响应中包含一个Cookie的设置指令。这个指令告诉浏览器将一个或多个Cookie保存到本地。</p>\n</li>\n<li><p>HTTP请求报文中的Cookie头：一旦浏览器存储了Cookie，当你下次再访问同一个网站时，浏览器会自动把这些Cookies包含在请求中，发送给服务器。</p>\n</li>\n<li><p>客户端的Cookie文件：浏览器将Cookie存储在本地的一个文件中，通常是一个文本文件，里面保存了所有网站发送的Cookies。</p>\n</li>\n<li><p>Web站点的后端数据库：Web站点通常会在服务器的数据库中存储与Cookie相关的数据。</p>\n</li>\n</ol>\n<h4 id=\"Cookie文件所携带的信息：\"><a href=\"#Cookie文件所携带的信息：\" class=\"headerlink\" title=\"Cookie文件所携带的信息：\"></a>Cookie文件所携带的信息：</h4><ul>\n<li><p>Cookie的名称（例如 <code>user_id</code>）</p>\n</li>\n<li><p>Cookie的值（例如 <code>12345</code>）</p>\n</li>\n<li><p>过期时间（如果没有过期，Cookie会在浏览器关闭时失效）</p>\n</li>\n<li><p>域名（指定这个Cookie是哪个网站的）</p>\n</li>\n<li><p>路径（表示这个Cookie适用于该网站的哪个部分）</p>\n</li>\n<li><p>安全属性（如果设置了 <code>secure</code>，这个Cookie只会通过HTTPS协议传输）</p>\n</li>\n<li><p>HttpOnly属性（如果设置了 <code>HttpOnly</code>，那么JavaScript不能访问这个Cookie，增加安全性）</p>\n</li>\n</ul>\n<h4 id=\"Cookie的工作流程\"><a href=\"#Cookie的工作流程\" class=\"headerlink\" title=\"Cookie的工作流程\"></a>Cookie的工作流程</h4><ol>\n<li><p>客户端第一次发送请求的时候没有cookie</p>\n</li>\n<li><p>服务器第一次响应的时候为客户端生成cookie，并返回cookie号</p>\n</li>\n<li><p>客户端收到响应之后将cookie保存到本地，由浏览器管理</p>\n</li>\n<li><p>之后的每次请求都会发送这个cookie</p>\n</li>\n</ol>\n<p>例如：</p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-40.png\"></p>\n<h4 id=\"Cookie应用\"><a href=\"#Cookie应用\" class=\"headerlink\" title=\"Cookie应用\"></a>Cookie应用</h4><p>Cookies的作用：</p>\n<ul>\n<li><p>用户验证：帮助网站记住用户身份，避免频繁登录。</p>\n</li>\n<li><p>购物车：记录购物车中的商品。</p>\n</li>\n<li><p>推荐：根据用户的浏览和购买行为，推荐相关产品。</p>\n</li>\n<li><p>用户状态：例如，Web邮箱中的已读/未读邮件状态。</p>\n</li>\n</ul>\n<p>如何维持状态：Cookies在HTTP报文中传递状态信息，帮助客户端和服务器在多次请求中维持状态。</p>\n<h4 id=\"Cookie与隐私\"><a href=\"#Cookie与隐私\" class=\"headerlink\" title=\"Cookie与隐私\"></a>Cookie与隐私</h4><ol>\n<li><p>Cookies允许站点知道许多关于 用户的信息</p>\n</li>\n<li><p>可能将它知道的东西卖给第三方</p>\n</li>\n<li><p>使用重定向和cookie的搜索引 擎还能知道用户更多的信息</p>\n</li>\n<li><p>如通过某个用户在大量站点 上的行为，了解其个人浏览方式的大致模式</p>\n</li>\n<li><p>广告公司从站点获得信息</p>\n</li>\n</ol>\n<h3 id=\"Web缓存\"><a href=\"#Web缓存\" class=\"headerlink\" title=\"Web缓存\"></a>Web缓存</h3><h4 id=\"proxy-server\"><a href=\"#proxy-server\" class=\"headerlink\" title=\"proxy server\"></a>proxy server</h4><p>不访问原始服务器就满足客户的请求</p>\n<p>用户通过设置浏览器：通过缓存访问Web</p>\n<p>浏览器将所有的HTTP请求发给缓存，如果命中则直接返回，不命中则访问原始服务器再返回</p>\n<p>缓存既是客户端又是服务器，缓存通常是由ISP安装的</p>\n<h4 id=\"为什么要使用Web缓存\"><a href=\"#为什么要使用Web缓存\" class=\"headerlink\" title=\"为什么要使用Web缓存\"></a>为什么要使用Web缓存</h4><ul>\n<li><p>降低客户端的请求响应时间</p>\n</li>\n<li><p>大大减少一个机构内部网络与internet接入链路上的流量</p>\n</li>\n<li><p>互联网大量采用了缓存：可以使得较弱的ICP也能有效提供内容</p>\n</li>\n</ul>\n<h4 id=\"缓存的例子\"><a href=\"#缓存的例子\" class=\"headerlink\" title=\"缓存的例子\"></a>缓存的例子</h4><p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-39.png\"></p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-38.png\"></p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-35.png\"></p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-32.png\"></p>\n<h3 id=\"条件GET方法\"><a href=\"#条件GET方法\" class=\"headerlink\" title=\"条件GET方法\"></a>条件GET方法</h3><p>如果缓存中的对象的拷贝是最新的，则原始服务器不再向缓存发送对象；如果是陈旧的，则原始服务器发送新的对象。</p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-30.png\"></p>\n<h2 id=\"2-3-FTP\"><a href=\"#2-3-FTP\" class=\"headerlink\" title=\"2.3 FTP\"></a>2.3 FTP</h2><p>通过客户端上传文件到服务器，也可以将服务器下载文件到客户端</p>\n<p>客户/服务器模式</p>\n<p>ftp：RFC 959</p>\n<p>ftp服务器：知名端口21</p>\n<p>有状态的协议</p>\n<h3 id=\"TCP控制连接\"><a href=\"#TCP控制连接\" class=\"headerlink\" title=\"TCP控制连接\"></a>TCP控制连接</h3><ol>\n<li><p>FTP客户端和FTP服务器通过端口21联系，并使用TCP为传输协议</p>\n</li>\n<li><p>客户端通过控制连接获得身份确认</p>\n</li>\n<li><p>客户端通过控制连接发送命令，浏览远程目录</p>\n</li>\n<li><p>收到一个文件传输命令时，服务器打开一个到客户端的数据连接</p>\n</li>\n<li><p>一个文件传输完成后，服务器关闭数据连接</p>\n</li>\n</ol>\n<h3 id=\"TCP数据连接\"><a href=\"#TCP数据连接\" class=\"headerlink\" title=\"TCP数据连接\"></a>TCP数据连接</h3><p>服务器打开第二个TCP数据连接用来传输文件</p>\n<p>带内传数据，带外传指令或控制信息</p>\n<h3 id=\"FTP命令、响应\"><a href=\"#FTP命令、响应\" class=\"headerlink\" title=\"FTP命令、响应\"></a>FTP命令、响应</h3><p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-36.png\"></p>\n<h2 id=\"2-4-EMail\"><a href=\"#2-4-EMail\" class=\"headerlink\" title=\"2.4 EMail\"></a>2.4 EMail</h2><p>三个组成部分：</p>\n<ul>\n<li><p>用户代理</p>\n</li>\n<li><p>邮件服务器</p>\n</li>\n<li><p>简单邮件传输协议</p>\n</li>\n</ul>\n<h3 id=\"用户代理\"><a href=\"#用户代理\" class=\"headerlink\" title=\"用户代理\"></a>用户代理</h3><p>用来编辑阅读邮件的客户端软件，如outlook，gmail等</p>\n<h3 id=\"邮件服务器\"><a href=\"#邮件服务器\" class=\"headerlink\" title=\"邮件服务器\"></a>邮件服务器</h3><p>用户代理通过邮件服务器发邮件</p>\n<p>邮箱中管理和维护发给用户的邮件</p>\n<p>输出报文队列保存待发送的邮件报文</p>\n<p>邮件服务器之间通过SMTP协议发送Email报文</p>\n<h3 id=\"SMTP协议\"><a href=\"#SMTP协议\" class=\"headerlink\" title=\"SMTP协议\"></a>SMTP协议</h3><p>使用TCP在客户端和服务器之间传送报文，知名端口为25</p>\n<p>直接传输：从发送方服务器到接收方服务器</p>\n<p>传输的三个阶段：</p>\n<ul>\n<li><p>握手</p>\n</li>\n<li><p>传输报文</p>\n</li>\n<li><p>关闭</p>\n</li>\n</ul>\n<p>命令：ASCII文本</p>\n<p>响应：状态码和状态信息</p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-33.png\"></p>\n<p>SMTP使用持久连接</p>\n<p>SMTP要求报文（首部和主体）为7为ASCII码编码</p>\n<p>SMTP服务器使用CRLF.CRLF决定报文的尾部</p>\n<h3 id=\"邮件报文格式\"><a href=\"#邮件报文格式\" class=\"headerlink\" title=\"邮件报文格式\"></a>邮件报文格式</h3><p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-37.png\"></p>\n<p>首部行：如：</p>\n<p>空白行</p>\n<p>主体（报文，只能是ASCII码编码）</p>\n<h3 id=\"多媒体邮件扩展MIME\"><a href=\"#多媒体邮件扩展MIME\" class=\"headerlink\" title=\"多媒体邮件扩展MIME\"></a>多媒体邮件扩展MIME</h3><p>在首部额外的行申明MIME内容类型</p>\n<p>比如通过Base64编码解码，将ASCII范围外的数据编码为ASCII，这样就能通过SMTP传输了</p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-31.png\"></p>\n<h3 id=\"邮件访问协议\"><a href=\"#邮件访问协议\" class=\"headerlink\" title=\"邮件访问协议\"></a>邮件访问协议</h3><p>从服务器访问邮件</p>\n<h4 id=\"POP3-邮局访问协议post-office-protocol-RFC-1939\"><a href=\"#POP3-邮局访问协议post-office-protocol-RFC-1939\" class=\"headerlink\" title=\"POP3 邮局访问协议post office protocol [RFC 1939]\"></a>POP3 邮局访问协议<em>post office protocol [RFC 1939]</em></h4><p>会话中是无状态的，本地管理文件夹</p>\n<p>用户身份确认（代理&lt;–&gt;服务器）并下载</p>\n<h5 id=\"用户确认阶段\"><a href=\"#用户确认阶段\" class=\"headerlink\" title=\"用户确认阶段\"></a>用户确认阶段</h5><p>客户端命令：</p>\n<p>user: 申明用户名</p>\n<p>pass: 口令</p>\n<p>服务器响应：</p>\n<p>+OK</p>\n<p>-ERR</p>\n<h5 id=\"事务处理阶段\"><a href=\"#事务处理阶段\" class=\"headerlink\" title=\"事务处理阶段\"></a>事务处理阶段</h5><p>list: 报文号列表 </p>\n<p>retr: 根据报文号检索报文 </p>\n<p>dele: 删除 </p>\n<p>quit</p>\n<h5 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h5><p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-56.png\"></p>\n<p>该例子使用“下载并删除”模式，如果改变客户机则不能阅读该邮件</p>\n<p>而使用“下载并保留”模式，不同客户机上为报文的拷贝</p>\n<h4 id=\"IMAP-Internet邮件访问协议Internet-Mail-Access-Protocol-RFC-1730\"><a href=\"#IMAP-Internet邮件访问协议Internet-Mail-Access-Protocol-RFC-1730\" class=\"headerlink\" title=\"IMAP Internet邮件访问协议Internet Mail Access Protocol [RFC 1730]\"></a>IMAP Internet邮件访问协议<em>Internet Mail Access Protocol [RFC 1730]</em></h4><p>更多特性，更复杂</p>\n<p>在服务器上处理存储的报文</p>\n<p>IMAP服务器将每个报文与一个文件夹联系起来</p>\n<p>允许用户用目录来组织报文，允许目录读取报文组件</p>\n<p>提供远程管理文件夹，则会话中会保留用户状态：</p>\n<p>目录名，报文ID与目录名之间的映射</p>\n<h4 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h4><p>方便</p>\n<p>Hotmail和Yahoo！Mail等</p>\n<h2 id=\"2-5-DNS\"><a href=\"#2-5-DNS\" class=\"headerlink\" title=\"2.5 DNS\"></a>2.5 DNS</h2><h3 id=\"DNS的必要性\"><a href=\"#DNS的必要性\" class=\"headerlink\" title=\"DNS的必要性\"></a>DNS的必要性</h3><ul>\n<li><p>IP地址标识主机、路由器</p>\n</li>\n<li><p>但是IP地址不好记忆，不便于人类使用（人类不能通过IP地址来解读出它的意义）</p>\n</li>\n<li><p>人类一般倾向于用一些有意义的字符串来标识</p>\n</li>\n<li><p>因此有着字符串-IP地址的映射转换的必要性</p>\n</li>\n</ul>\n<h3 id=\"DNS的总体思路和目标\"><a href=\"#DNS的总体思路和目标\" class=\"headerlink\" title=\"DNS的总体思路和目标\"></a>DNS的总体思路和目标</h3><p>DNS的主要思路</p>\n<ul>\n<li><p>分层的、基于域的命名机制</p>\n</li>\n<li><p>分布式的数据库完成名字到IP地址的转换</p>\n</li>\n<li><p>运行在UDP上端口号为53的应用服务</p>\n</li>\n<li><p>核心的Internet功能，但是以应用层协议实现</p>\n</li>\n</ul>\n<p>DNS的主要目的</p>\n<ul>\n<li><p>实现主机名-IP地址之间的转换</p>\n</li>\n<li><p>其他：</p>\n<ul>\n<li><p>主机别名到规范名字的转换</p>\n</li>\n<li><p>邮件服务器别名到邮件服务器正规名字的转换</p>\n</li>\n<li><p>负载均衡</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"DNS需要解决的问题\"><a href=\"#DNS需要解决的问题\" class=\"headerlink\" title=\"DNS需要解决的问题\"></a>DNS需要解决的问题</h3><ol>\n<li><p>问题1：如何命名设备</p>\n<p>用有意义的字符串：好记，便于人类使用</p>\n<p>解决一个平面命名的重名问题：层次化命名</p>\n</li>\n<li><p>问题2：如何完成名字到IP地址的转换</p>\n<p>分布式的数据库维护和响应名字查询</p>\n</li>\n<li><p>问题3：如何维护：增加或删除一个域，需要在域名系统中做哪些工作</p>\n</li>\n</ol>\n<h3 id=\"问题1：DNS命名空间\"><a href=\"#问题1：DNS命名空间\" class=\"headerlink\" title=\"问题1：DNS命名空间\"></a>问题1：DNS命名空间</h3><h4 id=\"DNS域名结构\"><a href=\"#DNS域名结构\" class=\"headerlink\" title=\"DNS域名结构\"></a>DNS域名结构</h4><p>一个层面的命名设备会有很多重名</p>\n<p>DNS采用层次树状结构的命名方法</p>\n<p>Internet根被分为几百个顶级域（Top Level Domains）</p>\n<p>通用的有 .com; .edu ; .gov ; .int ; .mil ; .net ; .org</p>\n<p>国家的有 .cn ; .us ; .nl ; .jp</p>\n<p>每个域下面分为若干个子域（subdomains）</p>\n<p>树叶是主机</p>\n<p>查询时需要从树根往下找，全球有13个根服务器</p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-57.png\"></p>\n<h4 id=\"域名Domain-Name\"><a href=\"#域名Domain-Name\" class=\"headerlink\" title=\"域名Domain Name\"></a>域名<em>Domain Name</em></h4><p>从本域往上，直到树根</p>\n<p>中间使用.间隔不同的级别</p>\n<p>例如</p>\n<p>ustc.edu.cn </p>\n<p>auto.ustc.edu.cn </p>\n<p><a href=\"http://www.auto.ustc.edu.cn/\">www.auto.ustc.edu.cn</a></p>\n<h4 id=\"域名的管理\"><a href=\"#域名的管理\" class=\"headerlink\" title=\"域名的管理\"></a>域名的管理</h4><p>一个域管理其下的子域</p>\n<p>.jp 被划分为 ac.jp co.jp </p>\n<p>.cn 被划分为 edu.cn com.cn</p>\n<p>创建一个新的域，需要征得其所属域的同意</p>\n<h4 id=\"域与物理网络无关\"><a href=\"#域与物理网络无关\" class=\"headerlink\" title=\"域与物理网络无关\"></a>域与物理网络无关</h4><p>域遵从组织界限而不是物理网络</p>\n<p>域的划分是逻辑的，而不是物理的</p>\n<h3 id=\"问题2：名字服务器\"><a href=\"#问题2：名字服务器\" class=\"headerlink\" title=\"问题2：名字服务器\"></a>问题2：名字服务器</h3><p>只有一个名字服务器的问题：</p>\n<ul>\n<li><p>可靠性问题：单点故障</p>\n</li>\n<li><p>扩展性问题：通信容量</p>\n</li>\n<li><p>维护问题：远距离的集中式数据库</p>\n</li>\n</ul>\n<h4 id=\"区域Zone\"><a href=\"#区域Zone\" class=\"headerlink\" title=\"区域Zone\"></a>区域<em>Zone</em></h4><p>将DNS的树划分为一个个互不相交的区域</p>\n<p>区域的划分由区域的管理者自己决定</p>\n<p>名字服务器：</p>\n<ul>\n<li><p>每个区域都有一个名字服务器，维护着它所管辖区域的权威信息</p>\n</li>\n<li><p>名字服务器允许被放置在区域之外，以保障可靠性</p>\n</li>\n</ul>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-54.png\"></p>\n<p>权威DNS服务器：组织机构的DNS服务器，提供组织机构服务器（如 Web和mail）可访问的主机和IP之间的映射。组织机构可以选择实现自己维护或由某个服务提供商来维护。</p>\n<p>顶级域（TLD）服务器：负责顶级域名（如com, org, net, edu和gov）和所有国家级的顶级域名（如cn, uk, fr, ca, jp ）</p>\n<h4 id=\"区域名字服务器\"><a href=\"#区域名字服务器\" class=\"headerlink\" title=\"区域名字服务器\"></a>区域名字服务器</h4><p>区域名字服务器维护资源记录</p>\n<h4 id=\"资源记录resource-records\"><a href=\"#资源记录resource-records\" class=\"headerlink\" title=\"资源记录resource records\"></a>资源记录<em>resource records</em></h4><p>作用:维护 域名-IP地址(或其他)的映射关系</p>\n<p>位置:Name server的分布式数据库中</p>\n<h5 id=\"RR格式-name-value-type-ttl\"><a href=\"#RR格式-name-value-type-ttl\" class=\"headerlink\" title=\"RR格式: (name, value, type, ttl)\"></a>RR格式: (name, value, type, ttl)</h5><ul>\n<li><p>Domain_name: 域名</p>\n</li>\n<li><p>Ttl: time to live 生存时间(权威, 缓冲记录)</p>\n</li>\n<li><p>Class 类别: 对于Internet, 值为IN</p>\n</li>\n<li><p>Value 值: 可以是数字、域名或ASCII串</p>\n</li>\n<li><p>Type 类别：资源记录的类型</p>\n</li>\n</ul>\n<h5 id=\"Type\"><a href=\"#Type\" class=\"headerlink\" title=\"Type\"></a>Type</h5><ul>\n<li><p>A: Name为主机 Value为IP地址</p>\n</li>\n<li><p>CNAME: Name为规范名字的别名 Value为规范名字</p>\n</li>\n<li><p>NS: Name为域名 Value为该域名的权威服务器的域名</p>\n</li>\n<li><p>MX: Value为Name对应的邮件服务器的名字</p>\n</li>\n</ul>\n<h5 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h5><p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-53.png\"></p>\n<h4 id=\"DNS大致工作过程\"><a href=\"#DNS大致工作过程\" class=\"headerlink\" title=\"DNS大致工作过程\"></a>DNS大致工作过程</h4><ol>\n<li><p>应用调用解析器<em>resolver</em> </p>\n</li>\n<li><p>解析器作为客户 向Name Server发出查询报文(封装在UDP段中)</p>\n</li>\n<li><p>Name Server返回响应报文(name/IP)</p>\n</li>\n</ol>\n<h4 id=\"本地名字服务器-local-name-server\"><a href=\"#本地名字服务器-local-name-server\" class=\"headerlink\" title=\"本地名字服务器(local name server)\"></a>本地名字服务器(local name server)</h4><p>一个设备能够上网通常需要配置主机IP,子网掩码,Default Gateway,本地名字服务器</p>\n<p>可以通过DHCP或Static配置</p>\n<p>可以指定任意一个名字服务器为Local(一般指定同一子网内的名字服务器)</p>\n<p>本地名字服务器不严格属于层次结构</p>\n<p>每个ISP都有一个本地DNS服务器(也称默认名字服务器)</p>\n<p>当主机发起一个DNS查询时,查询被送到其本地DNS服务器(起代理作用,将查询转发到层次结构中)</p>\n<h4 id=\"名字解析过程\"><a href=\"#名字解析过程\" class=\"headerlink\" title=\"名字解析过程\"></a>名字解析过程</h4><p>当目标名字在Local Name Server中</p>\n<ul>\n<li><p>查询的名字在该区域内部</p>\n</li>\n<li><p>缓存</p>\n</li>\n</ul>\n<p>当本地名字服务器不能解析名字时,联系根名字服务器。顺着根-TLD一直找,直到找到权威名字服务器</p>\n<h5 id=\"递归查询\"><a href=\"#递归查询\" class=\"headerlink\" title=\"递归查询\"></a>递归查询</h5><p>名字解析负担都在当前联络的名字服务器上</p>\n<p>问题：根服务器的负担太重</p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-58.png\"></p>\n<h5 id=\"迭代查询\"><a href=\"#迭代查询\" class=\"headerlink\" title=\"迭代查询\"></a>迭代查询</h5><p>根(以及各级域名)服务器返回的不是查询结果,而是下一个NS的地址,最后由权威名字服务器给出解析结果</p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-59.png\"></p>\n<h5 id=\"缓存和删除\"><a href=\"#缓存和删除\" class=\"headerlink\" title=\"缓存和删除\"></a>缓存和删除</h5><p>一旦名字服务器学到一个映射,就将该映射缓存起来</p>\n<p>根服务器通常都在本地服务器中缓存着,使得根服务器不用经常被访问</p>\n<p>可能存在的问题:如果情况变化，缓存结果和权威资源记录不一致</p>\n<p>解决问题:TLL(默认2天)</p>\n<p>缓存为了性能,删除为了一致性</p>\n<h3 id=\"DNS协议、报文\"><a href=\"#DNS协议、报文\" class=\"headerlink\" title=\"DNS协议、报文\"></a>DNS协议、报文</h3><p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-49.png\"></p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-55.png\"></p>\n<p>DNS协议的查询和响应报文的格式相同</p>\n<p>ID用于同时进行多个查询, flags用来标识查询/应答等等</p>\n<h3 id=\"问题3：维护问题\"><a href=\"#问题3：维护问题\" class=\"headerlink\" title=\"问题3：维护问题\"></a>问题3：维护问题</h3><p>新增一个域</p>\n<p>需要在上级域的名字服务器中增加两条记录,指向这个新增的子域的域名 和 域名服务器的地址</p>\n<p>在新增子域的名字服务器上运行名字服务器,负责本域的名字解析</p>\n<p>例如:在Com域中建立”Network Utopia”</p>\n<p>到注册登记机构注册域名networkutopia.com</p>\n<ul>\n<li><p>需要向该机构提供权威DNS服务器（基本的、和辅助的）的名字和IP地址</p>\n</li>\n<li><p>登记机构在com TLD服务器中插入两条RR记录: </p>\n<p>(networkutopia.com, dns1.networkutopia.com, NS)</p>\n<p>(dns1.networkutopia.com, 212.212.212.1, A)</p>\n</li>\n</ul>\n<p>在networkutopia.com的权威服务器中确保有</p>\n<ul>\n<li><p>用于Web服务器的<a href=\"http://www.networkuptopia.com的类型为a的记录/\">www.networkuptopia.com的类型为A的记录</a></p>\n</li>\n<li><p>用于邮件服务器mail.networkutopia.com的类型为MX的记录</p>\n</li>\n</ul>\n<h3 id=\"攻击DNS\"><a href=\"#攻击DNS\" class=\"headerlink\" title=\"攻击DNS\"></a>攻击DNS</h3><p>总的来说，DNS服务器是比较健壮的</p>\n<h4 id=\"DDoS攻击\"><a href=\"#DDoS攻击\" class=\"headerlink\" title=\"DDoS攻击\"></a>DDoS攻击</h4><p>对根服务器进行流量轰炸 攻击：发送大量ping</p>\n<ul>\n<li><p>没有成功</p>\n</li>\n<li><p>根服务器有防护：根服务器配置了流量过滤器和防火墙，能抵挡住这些攻击。</p>\n</li>\n<li><p>DNS服务器有缓存：本地的DNS服务器已经缓存了TLD（顶级域名服务器）的IP地址，因此不会每次都查询根服务器，从而避免了根服务器的压力。</p>\n</li>\n</ul>\n<p>向TLD服务器流量轰炸攻击 ：发送大量查询</p>\n<ul>\n<li>一般效果较弱，因为大多数DNS服务器已经缓存了TLD服务器的信息，避免了大量查询。</li>\n</ul>\n<h4 id=\"重定向攻击\"><a href=\"#重定向攻击\" class=\"headerlink\" title=\"重定向攻击\"></a>重定向攻击</h4><ul>\n<li><p>中间人攻击：截获查询，伪造回答</p>\n</li>\n<li><p>DNS中毒：发送伪造的应答给DNS服务器，希望它能缓存这个受到污染的结果</p>\n</li>\n<li><p>这类攻击比较难实施，需要分布式的手段来进行伪造和拦截。</p>\n</li>\n</ul>\n<h4 id=\"利用DNS基础设施进行DDos\"><a href=\"#利用DNS基础设施进行DDos\" class=\"headerlink\" title=\"利用DNS基础设施进行DDos\"></a>利用DNS基础设施进行DDos</h4><ul>\n<li><p>攻击者可以伪造源IP地址来进行查询，目标是放大攻击流量。</p>\n</li>\n<li><p>查询放大：发送小的查询请求，但返回的响应比查询请求大很多，从而放大攻击效果。</p>\n</li>\n</ul>\n<h2 id=\"2-6-P2P-应用\"><a href=\"#2-6-P2P-应用\" class=\"headerlink\" title=\"2.6 P2P 应用\"></a>2.6 P2P 应用</h2><h3 id=\"纯P2P架构\"><a href=\"#纯P2P架构\" class=\"headerlink\" title=\"纯P2P架构\"></a>纯P2P架构</h3><p>没有(或者极少)一直运行的服务器</p>\n<p>任意端系统都可以直接通信</p>\n<p>利用peer的服务能力</p>\n<p>Peer节点间歇上网,妹子IP地址都可能变化</p>\n<p>例子:</p>\n<ul>\n<li><p>文件分发(BitTorrent)</p>\n</li>\n<li><p>流媒体(KanKan)</p>\n</li>\n<li><p>VoIP(Skype)</p>\n</li>\n</ul>\n<h3 id=\"文件分发-C-S-vs-P2P\"><a href=\"#文件分发-C-S-vs-P2P\" class=\"headerlink\" title=\"文件分发: C/S vs P2P\"></a>文件分发: C/S vs P2P</h3><p>问题: 从一台服务器分发大小为F的文件到N个peer需要多少时间?</p>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-48.png\"></p>\n<h4 id=\"C-S模式\"><a href=\"#C-S模式\" class=\"headerlink\" title=\"C/S模式\"></a>C/S模式</h4><p>服务器的最小上传速率为: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 11.635ex;\"><svg style=\"vertical-align: -0.566ex; min-width: 11.635ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"2.262ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -750)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 750) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"493.3 -750 1 1000\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(605,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -750 1 1000\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:1\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></p>\n<p>服务器上传N个文件拷贝: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 14.102ex;\"><svg style=\"vertical-align: -1.925ex; min-width: 14.102ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"4.982ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -1351)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 1351) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"1038.5 -1351 1 2202.1\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\" transform=\"translate(0,-8)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(888,0)\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g></g><g data-mml-node=\"msub\" transform=\"translate(545.2,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(605,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g></g><rect width=\"1837\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -1351 1 2202.1\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:2\" transform=\"translate(0,742)\"><text data-id-align=\"true\"></text><g data-idbox=\"true\" transform=\"translate(0,-750)\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></g></svg></g></g></g></g></svg></mjx-container></p>\n<p>客户端最小下载速率为: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 13.683ex;\"><svg style=\"vertical-align: -0.566ex; min-width: 13.683ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"2.262ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -750)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 750) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"946 -750 1 1000\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(553,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(878,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1223,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -750 1 1000\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:3\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></p>\n<p>客户端下载一个文件的拷贝:<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 14.679ex;\"><svg style=\"vertical-align: -1.923ex; min-width: 14.679ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"4.977ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -1349.9)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 1349.9) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"1166 -1349.9 1 2199.8\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\" transform=\"translate(0,-6.1)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mi\" transform=\"translate(791.5,676)\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(553,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(878,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1223,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g><rect width=\"2092.1\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -1349.9 1 2199.8\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:4\" transform=\"translate(0,743.9)\"><text data-id-align=\"true\"></text><g data-idbox=\"true\" transform=\"translate(0,-750)\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></g></svg></g></g></g></g></svg></mjx-container></p>\n<p>则采用C/S的方式,耗时为</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.452ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"84.163ex\" height=\"2.149ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 37200 950\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"merror\" data-mjx-error=\"Missing or unrecognized delimiter for \\left\" title=\"Missing or unrecognized delimiter for \\left\"><rect data-background=\"true\" width=\"37200\" height=\"950\" y=\"-200\"></rect><title>Missing or unrecognized delimiter for \\left</title><g data-mml-node=\"mtext\" style=\"font-family: serif;\"><text data-variant=\"-explicitFont\" transform=\"scale(1,-1)\" font-size=\"884px\">D_{C-S} &gt;= max\\left{\\frac{NF}{u_{s}}, \\frac{F}{d_{min}}\\right}</text></g></g></g></g></svg></mjx-container></p>\n<h4 id=\"P2P模式-1\"><a href=\"#P2P模式-1\" class=\"headerlink\" title=\"P2P模式\"></a>P2P模式</h4><p>服务器至少需要上载一份拷贝</p>\n<p>发送一份拷贝的时间: <mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 12.63ex;\"><svg style=\"vertical-align: -1.922ex; min-width: 12.63ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"4.975ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -1349.5)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 1349.5) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"713.3 -1349.5 1 2199.1\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\" transform=\"translate(0,-6.5)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mi\" transform=\"translate(338.8,676)\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(605,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g></g><rect width=\"1186.6\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -1349.5 1 2199.1\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:5\" transform=\"translate(0,743.5)\"><text data-id-align=\"true\"></text><g data-idbox=\"true\" transform=\"translate(0,-750)\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></g></svg></g></g></g></g></svg></mjx-container></p>\n<p>每个客户端必须下载一份拷贝:<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 14.679ex;\"><svg style=\"vertical-align: -1.923ex; min-width: 14.679ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"4.977ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -1349.9)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 1349.9) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"1166 -1349.9 1 2199.8\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\" transform=\"translate(0,-6.1)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mi\" transform=\"translate(791.5,676)\"><path data-c=\"1D439\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(553,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(878,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1223,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g><rect width=\"2092.1\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -1349.9 1 2199.8\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:6\" transform=\"translate(0,743.9)\"><text data-id-align=\"true\"></text><g data-idbox=\"true\" transform=\"translate(0,-750)\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></g></svg></g></g></g></g></svg></mjx-container></p>\n<p>所有客户端总体下载量NF</p>\n<p>最大上载带宽是<mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\" width=\"full\" style=\"min-width: 20.078ex;\"><svg style=\"vertical-align: -1.018ex; min-width: 20.078ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"3.167ex\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(0.0181,-0.0181) translate(0, -950)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\" transform=\"translate(2078,0) translate(-2078,0)\"><g transform=\"translate(0 950) matrix(1 0 0 -1 0 0) scale(55.25)\"><svg data-table=\"true\" preserveAspectRatio=\"xMidYMid\" viewBox=\"2359.3 -950 1 1400\"><g transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mlabeledtr\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(605,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(1208.9,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2209.1,0)\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"></path></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(3819.7,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(605,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g></g></g></g></g></g></g></svg><svg data-labels=\"true\" preserveAspectRatio=\"xMaxYMid\" viewBox=\"1278 -950 1 1400\"><g data-labels=\"true\" transform=\"matrix(1 0 0 -1 0 0)\"><g data-mml-node=\"mtd\" id=\"mjx-eqn:7\"><g data-mml-node=\"mtext\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\" transform=\"translate(389,0)\"></path><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\" transform=\"translate(889,0)\"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></p>\n<p>除了服务器可以上载，其他所有的peer节点都可以上载</p>\n<p>则采用P2P的方式,耗时为</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.452ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"126.244ex\" height=\"2.149ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 55800 950\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"merror\" data-mjx-error=\"Missing or unrecognized delimiter for \\left\" title=\"Missing or unrecognized delimiter for \\left\"><rect data-background=\"true\" width=\"55800\" height=\"950\" y=\"-200\"></rect><title>Missing or unrecognized delimiter for \\left</title><g data-mml-node=\"mtext\" style=\"font-family: serif;\"><text data-variant=\"-explicitFont\" transform=\"scale(1,-1)\" font-size=\"884px\">D_{P2P} &gt;= max\\left{\\frac{F}{u_{s}}, \\frac{F}{d_{min}}, \\frac{NF}{u_{s} + \\sum{u_{i}}}\\right}</text></g></g></g></g></svg></mjx-container></p>\n<h3 id=\"P2P管理方式\"><a href=\"#P2P管理方式\" class=\"headerlink\" title=\"P2P管理方式:\"></a>P2P管理方式:</h3><h4 id=\"非结构化P2P\"><a href=\"#非结构化P2P\" class=\"headerlink\" title=\"非结构化P2P\"></a>非结构化P2P</h4><p>P和P之间构成的边是无规则的随机的</p>\n<h4 id=\"结构化P2P-分布式散列表DHT\"><a href=\"#结构化P2P-分布式散列表DHT\" class=\"headerlink\" title=\"结构化P2P(分布式散列表DHT)\"></a>结构化P2P(分布式散列表DHT)</h4><p>P和P之间构成的边是有序的,可以构成环、树等关系</p>\n<h3 id=\"P2P文件共享\"><a href=\"#P2P文件共享\" class=\"headerlink\" title=\"P2P文件共享\"></a>P2P文件共享</h3><p>有两大问题：</p>\n<ol>\n<li><p>如何定位所需资源</p>\n</li>\n<li><p>如何把处理Peer的加入与离开</p>\n</li>\n</ol>\n<h4 id=\"集中式目录\"><a href=\"#集中式目录\" class=\"headerlink\" title=\"集中式目录\"></a>集中式目录</h4><p>最初的Napster设计</p>\n<ol>\n<li><p>当对方连接时，他告知中心服务器：IP地址、资源</p>\n</li>\n<li><p>Alice查询</p>\n</li>\n<li><p>Alice从Bob处请求文件</p>\n</li>\n<li><p>告知中心服务器下线</p>\n</li>\n</ol>\n<p>集中式目录存在的问题：</p>\n<ul>\n<li><p>单点故障</p>\n</li>\n<li><p>性能瓶颈</p>\n</li>\n<li><p>侵犯版权</p>\n</li>\n</ul>\n<h4 id=\"查询泛洪：Gnutella（全分布式）\"><a href=\"#查询泛洪：Gnutella（全分布式）\" class=\"headerlink\" title=\"查询泛洪：Gnutella（全分布式）\"></a>查询泛洪：Gnutella（全分布式）</h4><p>全分布式，没有中心服务器</p>\n<p>开放文件共享协议</p>\n<p>覆盖网络：图</p>\n<p>如果X和Y之间有一个TCP连接，则它们之间存在一条边</p>\n<p>所有的Peer和边就是覆盖网络</p>\n<p>此处的边不是物理链路，而是逻辑上的边</p>\n<p>Gnutella协议</p>\n<ul>\n<li><p>在已有的TCP连接上发送查询报文</p>\n</li>\n<li><p>其他Peer转发查询报文</p>\n</li>\n<li><p>以反方向返回查询命中报文</p>\n</li>\n</ul>\n<p>使用有限步的泛洪，或者和BFS一样每个Peer记录一下是否被同一个报文查询过</p>\n<p>Gnutella的加入和离开</p>\n<ol>\n<li><p>X必须先发现覆盖网络中的其他Peer：使用可用Peer列表</p>\n</li>\n<li><p>X尝试与该列表上的其他Peer建立TCP连接，直到与某个对等方Y建立连接</p>\n</li>\n<li><p>X向Y发送Ping。</p>\n</li>\n<li><p>网络中所有接收到Ping的Peer，都需返回一个Pong，并且转发Ping</p>\n</li>\n<li><p>X收到许多Pong，然后能建立其他TCP连接</p>\n</li>\n</ol>\n<h4 id=\"混合体（半集中半分布）：KaZaA\"><a href=\"#混合体（半集中半分布）：KaZaA\" class=\"headerlink\" title=\"混合体（半集中半分布）：KaZaA\"></a>混合体（半集中半分布）：KaZaA</h4><p>每个Peer要么是组长，要么是组员</p>\n<p>组员与其组长之间有TCP连接，组长之间有TCP连接</p>\n<p>组长跟踪其所有组员的内容，组长可以转发查询到其他组长，获得其他组长的数据拷贝</p>\n<p>每个文件有一个Hash和一个描述符，客户端向其组长发送关键字查询。</p>\n<p>组长用匹配（元数据、散列标识码和IP地址）进行响应</p>\n<p>如果组长将查询转发给其他组长，其他组长也以匹配进行响应 </p>\n<p>客户端选择要下载的文件 向拥有文件的对等方发送一个带散列标识码的 HTTP请求</p>\n<h4 id=\"BitTorrent\"><a href=\"#BitTorrent\" class=\"headerlink\" title=\"BitTorrent\"></a>BitTorrent</h4><p>Torrent（洪流）：节点的组之间交换文件块</p>\n<p>Tracker：跟踪torrent中参与节点</p>\n<p>一个文件被分为一个个大小为256KB的块</p>\n<p>在bitmap中，一个bit来标识有没有某一个块，有为1，没有为0。</p>\n<p>Peer中通过周期性的泛洪来交换bitmap的信息</p>\n<p>Peer加入Torrent：</p>\n<p>一开始没有任何的块，但是将会通过其他节点积累文件快</p>\n<p>向文件服务器注册，获得Peer节点列表，和部分Peer连接</p>\n<p>当Peer下载时，同时也会向其他节点上传</p>\n<p>一旦一个Peer拥有完整的文件，它会自私地离开或者利他主义地留在torrent之中继续上传</p>\n<p>请求块：</p>\n<p>一开始随机请求块，之后请求希望得到的或者稀缺的块。（稀缺优先）</p>\n<p>发送块：tit-for-tat</p>\n<p>每个周期评估其他Peer节点。如果上个周期中某一节点对本节点提供的服务更好，则本周期优先向该节点提供的服务（优化疏通）。（谁对我好我也对谁好）</p>\n<p>文件的检索是带外的</p>\n<p>即文件会生成一个torrent文件，里面有一些描述信息，比如哪个tracker服务器维护着哪些节点在进行这个文件的上传下载，通过tracker得到这些Peer的信息进行连接。而torrent文件通常是在一些BT网站上找的</p>\n<h2 id=\"2-7-CDN\"><a href=\"#2-7-CDN\" class=\"headerlink\" title=\"2.7 CDN\"></a>2.7 CDN</h2><h3 id=\"视频\"><a href=\"#视频\" class=\"headerlink\" title=\"视频\"></a>视频</h3><p>视频可视为固定速度显示的图像序列，如24 image/sec</p>\n<p>网络视频的特点：</p>\n<ul>\n<li><p>高码率：&gt;10x于音频，高的网络带宽需求</p>\n</li>\n<li><p>可以被压缩</p>\n</li>\n<li><p>90%以上的网络流量是视频</p>\n</li>\n</ul>\n<p>而数字化图像本质上是像素阵列</p>\n<p>每个像素都可以用若干个bit表示</p>\n<p>编码：使用图像内和图像间的冗余来降低编码的比特数</p>\n<ul>\n<li><p>空间冗余（图像内</p>\n</li>\n<li><p>时间冗余（相邻图像间</p>\n</li>\n</ul>\n<p>CBR固定速率编码</p>\n<p>VBR视频编码速率随时间的变化而变化</p>\n<h3 id=\"多媒体流化服务\"><a href=\"#多媒体流化服务\" class=\"headerlink\" title=\"多媒体流化服务\"></a>多媒体流化服务</h3><p>流化：一边下载一边播放</p>\n<h4 id=\"DASH：Dynamic-Adaptive-Streaming-over-HTTP\"><a href=\"#DASH：Dynamic-Adaptive-Streaming-over-HTTP\" class=\"headerlink\" title=\"DASH：Dynamic Adaptive Streaming over HTTP\"></a>DASH：Dynamic Adaptive Streaming over HTTP</h4><p>服务器：</p>\n<ul>\n<li><p>将视频文件分割成多个块</p>\n</li>\n<li><p>每个块独立存储，编码不同码率（8-10种）</p>\n</li>\n<li><p>告示文件（manifest file）：提供不同块的URL</p>\n</li>\n</ul>\n<p>客户端：</p>\n<ul>\n<li><p>先获取告示文件</p>\n</li>\n<li><p>周期性地测量服务器到客户端的带宽</p>\n</li>\n<li><p>查询告示文件，在一个时刻请求一个块，HTTP头部指定字节范围</p>\n</li>\n<li><p>客户端是智能的：客户端自适应决定</p>\n<ul>\n<li><p>什么时候去请求块（不至于缓存挨饿或溢出）</p>\n</li>\n<li><p>请求什么编码速率的视频块（当带宽足够时，请求高质量的视频块）</p>\n</li>\n<li><p>去哪里请求块（可以向离自己近的服务器发送URL，或者向高度可用带宽的服务器请求）</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CDN（Content-Distribution-Networks）让内容靠近用户\"><a href=\"#CDN（Content-Distribution-Networks）让内容靠近用户\" class=\"headerlink\" title=\"CDN（Content Distribution Networks）让内容靠近用户\"></a>CDN（Content Distribution Networks）让内容靠近用户</h3><h4 id=\"挑战：服务器如何通过-网络向上百万用户同时流化视频内容（上百万视频内容）？\"><a href=\"#挑战：服务器如何通过-网络向上百万用户同时流化视频内容（上百万视频内容）？\" class=\"headerlink\" title=\"挑战：服务器如何通过 网络向上百万用户同时流化视频内容（上百万视频内容）？\"></a>挑战：服务器如何通过 网络向上百万用户同时流化视频内容（上百万视频内容）？</h4><h5 id=\"选择1：单个，大的超级服务中心mega-server\"><a href=\"#选择1：单个，大的超级服务中心mega-server\" class=\"headerlink\" title=\"选择1：单个，大的超级服务中心mega-server\"></a>选择1：单个，大的超级服务中心mega-server</h5><ul>\n<li><p>服务器到客户端上跳数较多，瓶颈链路的带宽小导致停顿</p>\n</li>\n<li><p>“二八定律”决定了网络同时充斥着同一个视频的多个拷贝，效率低</p>\n</li>\n<li><p>单点故障点，性能瓶颈</p>\n</li>\n<li><p>周边网络的拥塞</p>\n</li>\n</ul>\n<h5 id=\"选择2：CDN\"><a href=\"#选择2：CDN\" class=\"headerlink\" title=\"选择2：CDN\"></a>选择2：CDN</h5><p>通过CDN，全网部署缓存节点，存储服务内容，就近为用户提供服务，提高用户体验</p>\n<p>用户可以通过一些域名解析的重定向，访问最佳的缓存节点，跳数更少，网络更好。</p>\n<ul>\n<li>enter deep</li>\n</ul>\n<p>将CDN服务器深入到许多接入网</p>\n<ul>\n<li>bring home</li>\n</ul>\n<p>部署在少数关键位置，如将服务器簇安装于POP附近</p>\n<h4 id=\"客户端如何请求拷贝\"><a href=\"#客户端如何请求拷贝\" class=\"headerlink\" title=\"客户端如何请求拷贝\"></a>客户端如何请求拷贝</h4><p>用户通过与源服务器通信得到告示文件，或者通过域名解析重定向到缓存节点中请求内容。</p>\n<p>如果网络路径拥塞，则可能选择不同的拷贝</p>\n<h4 id=\"CDN运营\"><a href=\"#CDN运营\" class=\"headerlink\" title=\"CDN运营\"></a>CDN运营</h4><p>cache节点是在应用层、在网络边缘来加速内容的访问。</p>\n<p>Over the top。互联网络主机-主机之间的通信作为一种服务向用户提供。</p>\n<p>这种内容加速不是在网络核心上实现的</p>\n<p>OTT的挑战</p>\n<ul>\n<li><p>从哪个CDN节点中获取内容？</p>\n</li>\n<li><p>用户在网络拥塞时的行为？</p>\n</li>\n<li><p>在CDN节点中存储什么内容？</p>\n</li>\n</ul>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-47.png\"></p>\n<ol>\n<li><p>客户端浏览netcinema的网页，得到一个视频的URL链接</p>\n</li>\n<li><p>从DNS中解析得到权威名字服务器</p>\n</li>\n<li><p>权威名字服务器返回一个重定向，再次解析</p>\n</li>\n<li><p>得到KingCDN的权威名字服务器，返回离客户最近的缓存节点的IP地址</p>\n</li>\n<li><p>从CDN服务器请求视频</p>\n</li>\n</ol>\n<p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-51.png\"></p>\n<h2 id=\"2-8-TCP-socket编程\"><a href=\"#2-8-TCP-socket编程\" class=\"headerlink\" title=\"2.8 TCP socket编程\"></a>2.8 TCP socket编程</h2><p>应用层不能直接地传输报文，需要Socket API，通过socket使用下层的服务来传输。</p>\n<p>TCP是面向连接的、可靠的字节流服务。应用层需要自己维护报文界限。</p>\n<ol>\n<li><p>服务器首先运行，等待连接建立</p>\n<ul>\n<li><p>创建欢迎socket</p>\n</li>\n<li><p>和本地端口捆绑</p>\n</li>\n<li><p>在欢迎socket上阻塞式等待接收用户的连接</p>\n</li>\n</ul>\n</li>\n<li><p>客户端主动和服务器建立连接，客户端创建本地socket</p>\n<ul>\n<li>指定服务器进程的IP地址和端口号，与服务器进程连接</li>\n</ul>\n</li>\n<li><p>当与客户端连接请求来到时</p>\n<ul>\n<li><p>服务器接受来自用户端的请求，接触阻塞式等待，返回一个新的connection socket（与欢迎socket不一样），与客户端通信</p>\n</li>\n<li><p>允许服务器与多个客户端通信</p>\n</li>\n<li><p>使用源IP和源端口来区分不同客户端</p>\n</li>\n</ul>\n</li>\n<li><p>连接API调用有效时，客户端P与服务器建立了TCP连接</p>\n</li>\n</ol>\n<h3 id=\"两个数据结构\"><a href=\"#两个数据结构\" class=\"headerlink\" title=\"两个数据结构\"></a>两个数据结构</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//IP地址和port捆绑关系的数据结构（标示进程的端节点）</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">sockaddr_in</span> {</span><br><span class=\"line\">    <span class=\"type\">short</span> sin_family; <span class=\"comment\">//地址簇</span></span><br><span class=\"line\">    u_short sin_port; <span class=\"comment\">//port</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">in_addr</span> sin_addr; <span class=\"comment\">//IP地址</span></span><br><span class=\"line\">    <span class=\"type\">char</span> sin_zero[<span class=\"number\">8</span>]; <span class=\"comment\">//align</span></span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//域名和IP地址的数据结构</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">hostent</span> {</span><br><span class=\"line\">    <span class=\"type\">char</span> *h_name; <span class=\"comment\">//主机域名</span></span><br><span class=\"line\">    <span class=\"type\">char</span> **h_aliases; <span class=\"comment\">//主机的一系列的别名</span></span><br><span class=\"line\">    <span class=\"type\">int</span> h_addrtype; <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"type\">int</span> h_length; <span class=\"comment\">//地址长度</span></span><br><span class=\"line\">    <span class=\"type\">char</span> **h_addr_list; <span class=\"comment\">//地址列表</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">define</span> h_addr h_addr_list[0];</span></span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"C-S-socket交互-TCP\"><a href=\"#C-S-socket交互-TCP\" class=\"headerlink\" title=\"C/S socket交互: TCP\"></a>C/S socket交互: TCP</h3><p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-45.png\"></p>\n<h3 id=\"客户端代码\"><a href=\"#客户端代码\" class=\"headerlink\" title=\"客户端代码\"></a>客户端代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*client.c*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_ind</span> <span class=\"title\">sad</span>;</span> <span class=\"comment\">/* structure to hold ans IP address of server */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> clientSocket;        <span class=\"comment\">/* socket descriptor */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hostent</span> *<span class=\"title\">ptrh</span>;</span>    <span class=\"comment\">/* pointer to a host table entry */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> Sentence[<span class=\"number\">128</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span> modifiedSentence[<span class=\"number\">128</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    host = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">    port = atoi(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// create client socket connect to server</span></span><br><span class=\"line\">    clientSocket = socket(PF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>((<span class=\"type\">char</span> *)&amp;sad, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(sad)); <span class=\"comment\">/* clear sockaddr structure */</span></span><br><span class=\"line\">    sad.sin_family = AF_INET;             <span class=\"comment\">/* set family to Internet */</span></span><br><span class=\"line\">    sad.sin_port = htons((u_short)port);</span><br><span class=\"line\">    ptrh = gethostbyname(host);                          <span class=\"comment\">/* Convert host name to IP address */</span></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(&amp;sad.sin_addr, ptrh-&gt;h_addr, ptrh-&gt;h_length); <span class=\"comment\">// 将IP地址拷贝到sad.sin_addr</span></span><br><span class=\"line\">    connect(clientSocket, (<span class=\"keyword\">struct</span> sockaddr *)&amp;sad, <span class=\"keyword\">sizeof</span>(sad));</span><br><span class=\"line\"></span><br><span class=\"line\">    gets(Sentence); <span class=\"comment\">/* get input stream from user */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    n = write(clientSocket, Sentence, <span class=\"built_in\">strlen</span>(Sentence) + <span class=\"number\">1</span>);            <span class=\"comment\">/*send line to server */</span></span><br><span class=\"line\">    n = read(clientSocket, modifiedSentence, <span class=\"keyword\">sizeof</span>(modifiedSentence)); <span class=\"comment\">/* read line from server */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    close(clientSocket);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务器代码\"><a href=\"#服务器代码\" class=\"headerlink\" title=\"服务器代码\"></a>服务器代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* server.c */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">sad</span>;</span>              <span class=\"comment\">/* structure to hold an IP address of server*/</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">cad</span>;</span>              <span class=\"comment\">/*client */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> welcomeSocket, connectionSocket; <span class=\"comment\">/* socket descriptor */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hostent</span> *<span class=\"title\">ptrh</span>;</span>                <span class=\"comment\">/* pointer to a host table entry */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> clientSentence[<span class=\"number\">128</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span> capitalizedSentence[<span class=\"number\">128</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    port = atoi(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    welcomeSocket = socket(PF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// create welcoming socket at port</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>((<span class=\"type\">char</span> *)&amp;sad, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(sad)); <span class=\"comment\">/* clear sockaddr structure */</span></span><br><span class=\"line\">    sad.sin_family = AF_INET;             <span class=\"comment\">/* set family to Internet */</span></span><br><span class=\"line\">    sad.sin_addr.s_addr = INADDR_ANY;     <span class=\"comment\">/* set the local IP address */</span></span><br><span class=\"line\">    sad.sin_port = htons((u_short)port);  <span class=\"comment\">/* set the port number */</span></span><br><span class=\"line\">    <span class=\"comment\">// bind a local address</span></span><br><span class=\"line\">    bind(welcomeSocket, (<span class=\"keyword\">struct</span> sockaddr *)&amp;sad, <span class=\"keyword\">sizeof</span>(sad));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Specify the maximum number of clients that can be queued */</span></span><br><span class=\"line\">    listen(welcomeSocket, <span class=\"number\">10</span>) <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"comment\">// Wait, on welcoming socket for contact by a client</span></span><br><span class=\"line\">        connectionSocket = accept(welcomeSocket, (<span class=\"keyword\">struct</span> sockaddr *)&amp;cad, &amp;alen);</span><br><span class=\"line\">        n = read(connectionSocket, clientSentence, <span class=\"keyword\">sizeof</span>(clientSentence)); <span class=\"comment\">/* capitalize Sentence and store the result in capitalizedSentence*/</span></span><br><span class=\"line\">        <span class=\"comment\">// Write out the result to socket</span></span><br><span class=\"line\">        n = write(connectionSocket, capitalizedSentence, <span class=\"built_in\">strlen</span>(capitalizedSentence) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        close(connectionSocket);</span><br><span class=\"line\">        <span class=\"comment\">// End of while loop, loop back and wait for another client connection</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-9-UDP-socket编程\"><a href=\"#2-9-UDP-socket编程\" class=\"headerlink\" title=\"2.9 UDP socket编程\"></a>2.9 UDP socket编程</h2><p>UDP在客户端与服务器之间没有连接</p>\n<ul>\n<li><p>没有握手</p>\n</li>\n<li><p>发送端在每一个报文中明确地指定目标的IP地址和端口号</p>\n</li>\n<li><p>服务器必须从收到的分组中提取发送端的IP地址和端口号</p>\n</li>\n</ul>\n<p>UDP 提供不可靠的字节组的传送服务</p>\n<h3 id=\"C-S-socket交互-UDP\"><a href=\"#C-S-socket交互-UDP\" class=\"headerlink\" title=\"C/S socket交互: UDP\"></a>C/S socket交互: UDP</h3><p><img src=\"/../Asset/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E4%B8%AD%E7%A7%91%E5%A4%A7%EF%BC%89_Chapter2/image-50.png\"></p>\n<h3 id=\"客户端代码-1\"><a href=\"#客户端代码-1\" class=\"headerlink\" title=\"客户端代码\"></a>客户端代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* client.c */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">sad</span>;</span> <span class=\"comment\">/* structure to hold an IP address */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> clientSocket;       <span class=\"comment\">/* socket descriptor */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hostent</span> *<span class=\"title\">ptrh</span>;</span>   <span class=\"comment\">/* pointer to a host table entry */</span></span><br><span class=\"line\">    <span class=\"type\">char</span> Sentence[<span class=\"number\">128</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span> modifiedSentence[<span class=\"number\">128</span>];</span><br><span class=\"line\">    host = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">    port = atoi(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    clientSocket = socket(PF_INET, SOCK_DGRAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* determine the server's address */</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>((<span class=\"type\">char</span> *)&amp;sad, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(sad)); <span class=\"comment\">/* clear sockaddr structure */</span></span><br><span class=\"line\">    sad.sin_family = AF_INET;             <span class=\"comment\">/* set family to Internet */</span></span><br><span class=\"line\">    sad.sin_port = htons((u_short)port);</span><br><span class=\"line\">    ptrh = gethostbyname(host);</span><br><span class=\"line\">    <span class=\"comment\">/* Convert host name to IP address */</span></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(&amp;sad.sin_addr, ptrh-&gt;h_addr, ptrh-&gt;h_length);</span><br><span class=\"line\">    <span class=\"comment\">// Get input stream from user</span></span><br><span class=\"line\">    gets(Sentence);</span><br><span class=\"line\">    <span class=\"comment\">// Send line to server</span></span><br><span class=\"line\">    addr_len = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> sockaddr);</span><br><span class=\"line\">    n = sendto(clientSocket, Sentence, <span class=\"built_in\">strlen</span>(Sentence) + <span class=\"number\">1</span>, (<span class=\"keyword\">struct</span> sockaddr *)&amp;sad, addr_len);</span><br><span class=\"line\">    <span class=\"comment\">// Read line from server</span></span><br><span class=\"line\">    n = recvfrom(clientSocket, modifiedSentence, <span class=\"keyword\">sizeof</span>(modifiedSentence), (<span class=\"keyword\">struct</span> sockaddr *)&amp;sad, &amp;addr_len);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"FROM SERVER: %s\\n\"</span>, modifiedSentence);</span><br><span class=\"line\">    <span class=\"comment\">// Close connection</span></span><br><span class=\"line\">    close(clientSocket);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务器代码-1\"><a href=\"#服务器代码-1\" class=\"headerlink\" title=\"服务器代码\"></a>服务器代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* server.c */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">sad</span>;</span> <span class=\"comment\">/* structure to hold an IP address */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">cad</span>;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> serverSocket;     <span class=\"comment\">/* socket descriptor */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hostent</span> *<span class=\"title\">ptrh</span>;</span> <span class=\"comment\">/* pointer to a host table entry */</span></span><br><span class=\"line\">    <span class=\"type\">char</span> clientSentence[<span class=\"number\">128</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span> capitalizedSentence[<span class=\"number\">128</span>];</span><br><span class=\"line\">    port = atoi(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    serverSocket = socket(PF_INET, SOCK_DGRAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>((<span class=\"type\">char</span> *)&amp;sad, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(sad)); <span class=\"comment\">/* clear sockaddr structure */</span></span><br><span class=\"line\">    sad.sin_family = AF_INET;             <span class=\"comment\">/* set family to Internet */</span></span><br><span class=\"line\">    sad.sin_addr.s_addr = INADDR_ANY;     <span class=\"comment\">/* set the local IP address */</span></span><br><span class=\"line\">    sad.sin_port = htons((u_short)port);  <span class=\"comment\">/* set the port number */</span></span><br><span class=\"line\">    bind(serverSocket, (<span class=\"keyword\">struct</span> sockaddr *)&amp;sad, <span class=\"keyword\">sizeof</span>(sad));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"comment\">// Receive messages from clients</span></span><br><span class=\"line\">        n = recvfrom(serverSocket, clientSentence, <span class=\"keyword\">sizeof</span>(clientSentence), <span class=\"number\">0</span>(<span class=\"keyword\">struct</span> sockaddr *)&amp;cad, &amp;addr_len);</span><br><span class=\"line\">        <span class=\"comment\">/* capitalize Sentence and store the result in capitalizedSentence*/</span></span><br><span class=\"line\">        <span class=\"comment\">// Write out the result to socket</span></span><br><span class=\"line\">        n = sendto(serverSocket, capitalizedSentence, <span class=\"built_in\">strlen</span>(capitalizedSentence) + <span class=\"number\">1</span>,</span><br><span class=\"line\">                   (<span class=\"keyword\">struct</span> sockaddr *)&amp;cad, &amp;addr_len);</span><br><span class=\"line\">        <span class=\"comment\">// End of while loop, loop back and wait for another client connection</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"计算机网络","slug":"计算机网络","count":8,"path":"api/categories/计算机网络.json"},{"name":"中科大","slug":"计算机网络/中科大","count":8,"path":"api/categories/计算机网络/中科大.json"}],"tags":[{"name":"计算机网络","slug":"计算机网络","count":8,"path":"api/tags/计算机网络.json"}]}