{"title":"rcore-camp-2025S-stage2-lab2","slug":"rcore-camp-2025S-stage2-lab2","date":"2025-04-30T09:01:57.000Z","updated":"2025-05-05T04:30:44.384Z","comments":true,"path":"api/articles/rcore-camp-2025S-stage2-lab2.json","photos":[],"excerpt":null,"covers":null,"content":"<h1 id=\"编程作业\"><a href=\"#编程作业\" class=\"headerlink\" title=\"编程作业\"></a>编程作业</h1><h2 id=\"1-重写-sys-get-time-和-sys-trace\"><a href=\"#1-重写-sys-get-time-和-sys-trace\" class=\"headerlink\" title=\"1. 重写 sys_get_time 和 sys_trace\"></a>1. 重写 sys_get_time 和 sys_trace</h2><p>与lab1基本一样，不过多了虚拟内存到物理内存的映射</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">virt_to_phys</span>(vaddr: VirtAddr) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Result</span>&lt;PhysAddr, &amp;<span class=\"symbol\">'static</span> <span class=\"type\">str</span>&gt;{ ... }</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-mmap-和-munmap-匿名映射\"><a href=\"#2-mmap-和-munmap-匿名映射\" class=\"headerlink\" title=\"2. mmap 和 munmap 匿名映射\"></a>2. mmap 和 munmap 匿名映射</h2><p>直接调用 <code>memory_set</code> 中的接口，检查完一系列情况后直接在 <code>memory_set</code> 中调用 <code>insert_framed_area</code> </p>\n<p> <code>munmap</code> 需要自己仿照 <code>insert_framed_area</code> 实现一个 <code>umap</code> ，由于 <code>sys_munmap</code> 仅会对应 唯一且完整 的 <code>mmap</code> 区间， 不考虑交叉、截断区间的情况。所以实现起来是相当简单的。</p>\n<h1 id=\"简答作业\"><a href=\"#简答作业\" class=\"headerlink\" title=\"简答作业\"></a>简答作业</h1><h2 id=\"Q1请列举-SV39-页表页表项的组成，描述其中的标志位有何作用？\"><a href=\"#Q1请列举-SV39-页表页表项的组成，描述其中的标志位有何作用？\" class=\"headerlink\" title=\"Q1请列举 SV39 页表页表项的组成，描述其中的标志位有何作用？\"></a>Q1请列举 SV39 页表页表项的组成，描述其中的标志位有何作用？</h2><p>PTE中0-7为标志位，10-53是物理页号</p>\n<ul>\n<li>V: 合法</li>\n<li>R/W/X: 读取/写入/取指</li>\n<li>U: 在 CPU 处于 U 特权级的情况下是否被允许访问</li>\n<li>A: 自从页表项上的这一位被清零之后，页表项的对应虚拟页面是否被访问过</li>\n<li>D: 自从页表项上的这一位被清零之后，页表项的对应虚拟页表是否被修改过</li>\n</ul>\n<h2 id=\"Q2缺页\"><a href=\"#Q2缺页\" class=\"headerlink\" title=\"Q2缺页\"></a>Q2缺页</h2><blockquote>\n<p>缺页指的是进程访问页面时页面不在页表中或在页表中无效的现象，此时 MMU 将会返回一个中断， 告知 os 进程内存访问出了问题。os 选择填补页表并重新执行异常指令或者杀死进程。</p>\n</blockquote>\n<h3 id=\"Q2-1请问哪些异常可能是缺页导致的？\"><a href=\"#Q2-1请问哪些异常可能是缺页导致的？\" class=\"headerlink\" title=\"Q2.1请问哪些异常可能是缺页导致的？\"></a>Q2.1请问哪些异常可能是缺页导致的？</h3><ul>\n<li>PageFault</li>\n<li>AccessViolation</li>\n<li>SegmentationFault</li>\n</ul>\n<h3 id=\"Q2-2发生缺页时，描述相关重要寄存器的值，上次实验描述过的可以简略。\"><a href=\"#Q2-2发生缺页时，描述相关重要寄存器的值，上次实验描述过的可以简略。\" class=\"headerlink\" title=\"Q2.2发生缺页时，描述相关重要寄存器的值，上次实验描述过的可以简略。\"></a>Q2.2发生缺页时，描述相关重要寄存器的值，上次实验描述过的可以简略。</h3><h4 id=\"STVAL（Supervisor-Trap-Value）寄存器：\"><a href=\"#STVAL（Supervisor-Trap-Value）寄存器：\" class=\"headerlink\" title=\"STVAL（Supervisor Trap Value）寄存器：\"></a>STVAL（Supervisor Trap Value）寄存器：</h4><p>该寄存器用于存储导致异常的虚拟地址。<br>当发生缺页异常时，STVAL 寄存器会被设置为引发异常的虚拟地址，即所请求的页的地址。<br>在页表解析失败的情况下，操作系统可以通过此地址进行进一步的异常处理（如页面分配或置换）。</p>\n<h4 id=\"SCAUSE（Supervisor-Cause）寄存器：\"><a href=\"#SCAUSE（Supervisor-Cause）寄存器：\" class=\"headerlink\" title=\"SCAUSE（Supervisor Cause）寄存器：\"></a>SCAUSE（Supervisor Cause）寄存器：</h4><p>用于存储异常的原因代码。<br>当发生缺页异常时，SCAUSE 寄存器的值会指向与缺页相关的异常原因代码。</p>\n<h4 id=\"SEPC（Supervisor-Exception-Program-Counter）寄存器：\"><a href=\"#SEPC（Supervisor-Exception-Program-Counter）寄存器：\" class=\"headerlink\" title=\"SEPC（Supervisor Exception Program Counter）寄存器：\"></a>SEPC（Supervisor Exception Program Counter）寄存器：</h4><p>该寄存器用于保存发生异常的指令地址。<br>当缺页异常发生时，SEPC 会保存导致异常的指令地址，以便异常处理完成后能继续从该指令执行。</p>\n<blockquote>\n<p>缺页有两个常见的原因，其一是 Lazy 策略，也就是直到内存页面被访问才实际进行页表操作。 比如，一个程序被执行时，进程的代码段理论上需要从磁盘加载到内存。但是 os 并不会马上这样做， 而是会保存 .text 段在磁盘的位置信息，在这些代码第一次被执行时才完成从磁盘的加载操作。</p>\n</blockquote>\n<h3 id=\"Q2-3这样做有哪些好处？\"><a href=\"#Q2-3这样做有哪些好处？\" class=\"headerlink\" title=\"Q2.3这样做有哪些好处？\"></a>Q2.3这样做有哪些好处？</h3><ol>\n<li>只有在实际需要时才加载页面，可以显著减少内存的占用</li>\n<li>加快程序的启动速度</li>\n<li>减少非必要的磁盘I/O</li>\n</ol>\n<blockquote>\n<p>其实，我们的 mmap 也可以采取 Lazy 策略，比如：一个用户进程先后申请了 10G 的内存空间， 然后用了其中 1M 就直接退出了。按照现在的做法，我们显然亏大了，进行了很多没有意义的页表操作。</p>\n</blockquote>\n<h3 id=\"Q2-4处理-10G-连续的内存页面，对应的-SV39-页表大致占用多少内存-估算数量级即可-？\"><a href=\"#Q2-4处理-10G-连续的内存页面，对应的-SV39-页表大致占用多少内存-估算数量级即可-？\" class=\"headerlink\" title=\"Q2.4处理 10G 连续的内存页面，对应的 SV39 页表大致占用多少内存 (估算数量级即可)？\"></a>Q2.4处理 10G 连续的内存页面，对应的 SV39 页表大致占用多少内存 (估算数量级即可)？</h3><p>约10KB</p>\n<h3 id=\"Q2-5请简单思考如何才能实现-Lazy-策略，缺页时又如何处理？描述合理即可，不需要考虑实现。\"><a href=\"#Q2-5请简单思考如何才能实现-Lazy-策略，缺页时又如何处理？描述合理即可，不需要考虑实现。\" class=\"headerlink\" title=\"Q2.5请简单思考如何才能实现 Lazy 策略，缺页时又如何处理？描述合理即可，不需要考虑实现。\"></a>Q2.5请简单思考如何才能实现 Lazy 策略，缺页时又如何处理？描述合理即可，不需要考虑实现。</h3><p>在进程启动时，不立即加载所有需要的页面，而是只加载必要的页面<br>为其他页面在页表中设置一个标记，表示这些页面尚未加载。 对于未加载的页面，页表条目指向一个特殊的缺页处理程序。</p>\n<p>捕获缺页异常-&gt;查找页面位置-&gt;加载页面-&gt;恢复</p>\n<blockquote>\n<p>缺页的另一个常见原因是 swap 策略，也就是内存页面可能被换到磁盘上了，导致对应页面失效。</p>\n</blockquote>\n<h3 id=\"Q2-6此时页面失效如何表现在页表项-PTE-上？\"><a href=\"#Q2-6此时页面失效如何表现在页表项-PTE-上？\" class=\"headerlink\" title=\"Q2.6此时页面失效如何表现在页表项(PTE)上？\"></a>Q2.6此时页面失效如何表现在页表项(PTE)上？</h3><p>PTEFlag中的V标志置0</p>\n<h2 id=\"Q3双页表与单页表\"><a href=\"#Q3双页表与单页表\" class=\"headerlink\" title=\"Q3双页表与单页表\"></a>Q3双页表与单页表</h2><blockquote>\n<p>为了防范侧信道攻击，我们的 os 使用了双页表。但是传统的设计一直是单页表的，也就是说， 用户线程和对应的内核线程共用同一张页表，只不过内核对应的地址只允许在内核态访问。 (备注：这里的单/双的说法仅为自创的通俗说法，并无这个名词概念，详情见 KPTI )</p>\n</blockquote>\n<h3 id=\"Q3-1在单页表情况下，如何更换页表？\"><a href=\"#Q3-1在单页表情况下，如何更换页表？\" class=\"headerlink\" title=\"Q3.1在单页表情况下，如何更换页表？\"></a>Q3.1在单页表情况下，如何更换页表？</h3><p>保存当前页表-&gt;设置新的页表-&gt;刷新TLB</p>\n<h3 id=\"Q3-2单页表情况下，如何控制用户态无法访问内核页面？（tips-看看上一题最后一问）\"><a href=\"#Q3-2单页表情况下，如何控制用户态无法访问内核页面？（tips-看看上一题最后一问）\" class=\"headerlink\" title=\"Q3.2单页表情况下，如何控制用户态无法访问内核页面？（tips:看看上一题最后一问）\"></a>Q3.2单页表情况下，如何控制用户态无法访问内核页面？（tips:看看上一题最后一问）</h3><p>PTEFlag中的U标志置0</p>\n<h3 id=\"Q3-3单页表有何优势？（回答合理即可）\"><a href=\"#Q3-3单页表有何优势？（回答合理即可）\" class=\"headerlink\" title=\"Q3.3单页表有何优势？（回答合理即可）\"></a>Q3.3单页表有何优势？（回答合理即可）</h3><ul>\n<li>有更高的性能，在时间上的开销小</li>\n<li>实现简单</li>\n<li>易于管理</li>\n</ul>\n<h3 id=\"Q3-4双页表实现下，何时需要更换页表？假设你写一个单页表操作系统，你会选择何时更换页表（回答合理即可）？\"><a href=\"#Q3-4双页表实现下，何时需要更换页表？假设你写一个单页表操作系统，你会选择何时更换页表（回答合理即可）？\" class=\"headerlink\" title=\"Q3.4双页表实现下，何时需要更换页表？假设你写一个单页表操作系统，你会选择何时更换页表（回答合理即可）？\"></a>Q3.4双页表实现下，何时需要更换页表？假设你写一个单页表操作系统，你会选择何时更换页表（回答合理即可）？</h3><p>双页表下：<br>上下文切换 页表更新 内存管理策略（如swap）</p>\n<p>单页表下：<br>上下文切换 处理缺页异常 替换长时间没被使用的PTE 页表大小调整</p>\n<h1 id=\"荣誉准则\"><a href=\"#荣誉准则\" class=\"headerlink\" title=\"荣誉准则\"></a>荣誉准则</h1><ol>\n<li><p>在完成本次实验的过程（含此前学习的过程）中，我曾分别与 以下各位 就（与本次实验相关的）以下方面做过交流，还在代码中对应的位置以注释形式记录了具体的交流对象及内容：</p>\n<p>无</p>\n</li>\n<li><p>此外，我也参考了 以下资料 ，还在代码中对应的位置以注释形式记录了具体的参考来源及内容：</p>\n<p>无</p>\n</li>\n<li><p>我独立完成了本次实验除以上方面之外的所有工作，包括代码与文档。 我清楚地知道，从以上方面获得的信息在一定程度上降低了实验难度，可能会影响起评分。</p>\n</li>\n<li><p>我从未使用过他人的代码，不管是原封不动地复制，还是经过了某些等价转换。 我未曾也不会向他人（含此后各届同学）复制或公开我的实验代码，我有义务妥善保管好它们。 我提交至本实验的评测系统的代码，均无意于破坏或妨碍任何计算机系统的正常运转。 我清楚地知道，以上情况均为本课程纪律所禁止，若违反，对应的实验成绩将按“-100”分计。</p>\n</li>\n</ol>\n","categories":[],"tags":[{"name":"Rcore","slug":"Rcore","count":6,"path":"api/tags/Rcore.json"}]}