{"title":"rcore-camp-2025S-stage2-lab4","slug":"rcore-camp-2025S-stage2-lab4","date":"2025-04-30T09:02:28.000Z","updated":"2025-05-05T04:30:44.384Z","comments":true,"path":"api/articles/rcore-camp-2025S-stage2-lab4.json","photos":[],"excerpt":null,"covers":null,"content":"<h1 id=\"编程作业\"><a href=\"#编程作业\" class=\"headerlink\" title=\"编程作业\"></a>编程作业</h1><h2 id=\"1-迁移\"><a href=\"#1-迁移\" class=\"headerlink\" title=\"1.迁移\"></a>1.迁移</h2><p>直接迁移即可，只需稍微修改一下spawn，因为文件系统的引入，我们需要从文件系统中加载用户程序</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">sys_spawn</span>(path: *<span class=\"keyword\">const</span> <span class=\"type\">u8</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">isize</span> {</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Some</span>(app_inode) = <span class=\"title function_ invoke__\">open_file</span>(path.<span class=\"title function_ invoke__\">as_str</span>(), OpenFlags::RDONLY) {</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">data</span> = app_inode.<span class=\"title function_ invoke__\">read_all</span>();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">new_task</span> = current_task.<span class=\"title function_ invoke__\">spawn</span>(data.<span class=\"title function_ invoke__\">as_slice</span>());</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-fstat\"><a href=\"#2-fstat\" class=\"headerlink\" title=\"2.fstat\"></a>2.fstat</h2><p>就是单纯的获得 <code>(ino, mode, nlink)</code> ，并把它们填到 <code>Stat</code> 之中<br><code>nlink</code> 直接暴力遍历并计数即可<br>主要还是 <code>ino</code> 的获取， <code>Inode</code> 将自己的 <code>block_id</code> 和 <code>block_offset</code> 传给 <code>fs</code><br>然后我们自己通过这两个参数算出 <code>ino</code></p>\n<h2 id=\"3-linkat\"><a href=\"#3-linkat\" class=\"headerlink\" title=\"3.linkat\"></a>3.linkat</h2><p>仿照 <code>create()</code> 写了一个 <code>linkat</code><br>根据 <code>old_name</code> 去读取 <code>old_inode_id</code> ，然后检测 <code>new_name</code> 是否存在，<br>写入一个新的 <code>new_name</code> ，其 <code>inode_id</code> 为 <code>old_inode_id</code></p>\n<h2 id=\"4-unlinkat\"><a href=\"#4-unlinkat\" class=\"headerlink\" title=\"4.unlinkat\"></a>4.unlinkat</h2><p>直接暴力查找，如果找到对应的dirent，将其改为DirEntry::empty()</p>\n<h1 id=\"简答作业\"><a href=\"#简答作业\" class=\"headerlink\" title=\"简答作业\"></a>简答作业</h1><h2 id=\"Q1-在我们的easy-fs中，root-inode起着什么作用？如果root-inode中的内容损坏了，会发生什么？\"><a href=\"#Q1-在我们的easy-fs中，root-inode起着什么作用？如果root-inode中的内容损坏了，会发生什么？\" class=\"headerlink\" title=\"Q1.在我们的easy-fs中，root inode起着什么作用？如果root inode中的内容损坏了，会发生什么？\"></a>Q1.在我们的easy-fs中，root inode起着什么作用？如果root inode中的内容损坏了，会发生什么？</h2><p>ROOT_INODE是根目录所对应的inode，如果ROOT_INODE损坏，整个文件系统也无法正确运行</p>\n<h2 id=\"Q2-举出使用-pipe-的一个实际应用的例子。\"><a href=\"#Q2-举出使用-pipe-的一个实际应用的例子。\" class=\"headerlink\" title=\"Q2.举出使用 pipe 的一个实际应用的例子。\"></a>Q2.举出使用 pipe 的一个实际应用的例子。</h2><p>一个命令的输出作为另一个命令的输入</p>\n<h2 id=\"Q3-如果需要在多个进程间互相通信，则需要为每一对进程建立一个管道，非常繁琐，请设计一个更易用的多进程通信机制。\"><a href=\"#Q3-如果需要在多个进程间互相通信，则需要为每一对进程建立一个管道，非常繁琐，请设计一个更易用的多进程通信机制。\" class=\"headerlink\" title=\"Q3.如果需要在多个进程间互相通信，则需要为每一对进程建立一个管道，非常繁琐，请设计一个更易用的多进程通信机制。\"></a>Q3.如果需要在多个进程间互相通信，则需要为每一对进程建立一个管道，非常繁琐，请设计一个更易用的多进程通信机制。</h2><ul>\n<li>共享内存</li>\n<li>golang的channel</li>\n</ul>\n<h1 id=\"荣誉准则\"><a href=\"#荣誉准则\" class=\"headerlink\" title=\"荣誉准则\"></a>荣誉准则</h1><ol>\n<li><p>在完成本次实验的过程（含此前学习的过程）中，我曾分别与 以下各位 就（与本次实验相关的）以下方面做过交流，还在代码中对应的位置以注释形式记录了具体的交流对象及内容：</p>\n<p>无</p>\n</li>\n<li><p>此外，我也参考了 以下资料 ，还在代码中对应的位置以注释形式记录了具体的参考来源及内容：</p>\n<p>无</p>\n</li>\n<li><p>我独立完成了本次实验除以上方面之外的所有工作，包括代码与文档。 我清楚地知道，从以上方面获得的信息在一定程度上降低了实验难度，可能会影响起评分。</p>\n</li>\n<li><p>我从未使用过他人的代码，不管是原封不动地复制，还是经过了某些等价转换。 我未曾也不会向他人（含此后各届同学）复制或公开我的实验代码，我有义务妥善保管好它们。 我提交至本实验的评测系统的代码，均无意于破坏或妨碍任何计算机系统的正常运转。 我清楚地知道，以上情况均为本课程纪律所禁止，若违反，对应的实验成绩将按“-100”分计。</p>\n</li>\n</ol>\n","categories":[],"tags":[{"name":"Rcore","slug":"Rcore","count":6,"path":"api/tags/Rcore.json"}]}