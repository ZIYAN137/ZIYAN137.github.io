{"name":"Rcore","slug":"Rcore","count":6,"postlist":[{"title":"rcore_camp_2025S_stage1&2","slug":"rcore-camp-2025S-stage1&2","date":"2025-04-30T09:03:26.000Z","updated":"2025-05-05T04:30:44.384Z","comments":true,"path":"api/articles/rcore-camp-2025S-stage1&2.json","excerpt":"<h1 id=\"前导\"><a href=\"#前导\" class=\"headerlink\" title=\"前导\"></a>前导</h1><p>本博客作为开源操作系统训练营2025S的1、2阶段学习记录，简单总结了在这两个阶段的学习和coding。留作纪念，也希望能够帮助到大家。</p>","keywords":null,"cover":null,"content":null,"text":"前导本博客作为开源操作系统训练营2025S的1、2阶段学习记录，简单总结了在这两个阶段的学习和coding。留作纪念，也希望能够帮助到大家。Stage1所有权系统在传统的语言中，要么使用GC来管理内存（如Java），要么让程序员自己管理内存（如C/C++）。<br>前者需要运行在","raw":null,"photos":[],"categories":[],"tags":[{"name":"Rcore","slug":"Rcore","count":6,"path":"api/tags/Rcore.json"}]},{"title":"rcore-camp-2025S-stage2-lab1","slug":"rcore-camp-2025S-stage2-lab1","date":"2025-04-30T09:01:44.000Z","updated":"2025-05-05T04:30:44.384Z","comments":true,"path":"api/articles/rcore-camp-2025S-stage2-lab1.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"编程作业\"><a href=\"#编程作业\" class=\"headerlink\" title=\"编程作业\"></a>编程作业</h1><p>首先在 <code>config.rs</code> 中添加常量 <code>MAX_SYSCALL_NUM = 500</code></p>\n<p>然后修改 <code>TaskControlBlock</code> 的结构，添加了 <code>syscall-times</code> ，用于记录task对于每个系统调用的次数。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">TaskControlBlock</span> {</span><br><span class=\"line\">    <span class=\"comment\">/// The task status in it's lifecycle</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> task_status: TaskStatus,</span><br><span class=\"line\">    <span class=\"comment\">/// The task context</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> task_cx: TaskContext,</span><br><span class=\"line\">    <span class=\"comment\">/// syscall times</span></span><br><span class=\"line\">    <span class=\"keyword\">pub</span> syscall_times: [<span class=\"type\">u32</span>; MAX_SYSCALL_NUM]</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<p>然后 <code>task</code> 模块中添加相关的计数和获取的相关函数</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">cnt_syscall</span>(&amp;<span class=\"keyword\">self</span>, syscall_id: <span class=\"type\">usize</span>) {</span><br><span class=\"line\">    ...</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">get_syscall_times</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> [<span class=\"type\">u32</span>; MAX_SYSCALL_NUM] {</span><br><span class=\"line\">    ...</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<p>在syscall中添加一行，每次syscall时触发计数。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">syscall</span>(syscall_id: <span class=\"type\">usize</span>, args: [<span class=\"type\">usize</span>; <span class=\"number\">3</span>]) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">isize</span> {</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">cnt_syscall</span>(syscall_id);    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<p>最后实现 <code>sys_trace</code> </p>\n<h1 id=\"简答作业\"><a href=\"#简答作业\" class=\"headerlink\" title=\"简答作业\"></a>简答作业</h1><h2 id=\"Q1\"><a href=\"#Q1\" class=\"headerlink\" title=\"Q1\"></a>Q1</h2><p>正确进入 U 态后，程序的特征还应有：使用 S 态特权指令，访问 S 态寄存器后会报错。 请同学们可以自行测试这些内容（运行 三个 bad 测例 (ch2b_bad_*.rs) ）， 描述程序出错行为，同时注意注明你使用的 sbi 及其版本。</p>\n<h2 id=\"A1\"><a href=\"#A1\" class=\"headerlink\" title=\"A1\"></a>A1</h2><p>ch2b_bad_address.rs<br>程序尝试向地址 0x0 写入数据，触发地址访问异常（Address Fault）。<br>错误行为：程序陷入异常处理流程，打印错误信息或直接终止。</p>\n<p>ch2b_bad_instructions.rs<br>程序尝试执行 sret 指令（S 态特权指令），触发非法指令异常（Illegal Instruction）。<br>错误行为：程序无法继续执行，陷入异常处理流程。</p>\n<p>ch2b_bad_register.rs<br>程序尝试读取 sstatus 寄存器（S 态特权寄存器），触发非法指令异常（Illegal Instruction）。<br>错误行为：程序无法继续执行，陷入异常处理流程。</p>\n<h2 id=\"Q2\"><a href=\"#Q2\" class=\"headerlink\" title=\"Q2\"></a>Q2</h2><p>深入理解 trap.S 中两个函数 <code>__alltraps</code> 和 <code>__restore</code> 的作用，并回答如下问题:</p>\n<h3 id=\"Q2-1\"><a href=\"#Q2-1\" class=\"headerlink\" title=\"Q2.1\"></a>Q2.1</h3><p>L40：刚进入 <code>__restore</code> 时，<code>sp</code> 代表了什么值。请指出 <code>__restore</code> 的两种使用情景。</p>\n<h3 id=\"A2-1\"><a href=\"#A2-1\" class=\"headerlink\" title=\"A2.1\"></a>A2.1</h3><p> <code>sp</code> 指向内核栈中保存的TrapContext的起始地址。使用场景：</p>\n<p>从 S 态返回到 U 态，恢复用户态的寄存器和状态。</p>\n<p>从中断或异常处理返回到用户态，恢复用户态的执行上下文。</p>\n<h3 id=\"Q2-2\"><a href=\"#Q2-2\" class=\"headerlink\" title=\"Q2.2\"></a>Q2.2</h3><p>L43-L48：这几行汇编代码特殊处理了哪些寄存器？这些寄存器的的值对于进入用户态有何意义？请分别解释。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ld t0, 32*8(sp)</span><br><span class=\"line\">ld t1, 33*8(sp)</span><br><span class=\"line\">ld t2, 2*8(sp)</span><br><span class=\"line\">csrw sstatus, t0</span><br><span class=\"line\">csrw sepc, t1</span><br><span class=\"line\">csrw sscratch, t2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"A2-2\"><a href=\"#A2-2\" class=\"headerlink\" title=\"A2.2\"></a>A2.2</h3><p>特殊处理了 <code>sstatus</code> , <code>sepc</code>, <code>sscratch</code> 这三个寄存器。</p>\n<ul>\n<li><code>sstatus</code>: 一个状态寄存器，包含了处理器的当前状态信息,恢复sstatus确保返回用户态时具有正确状态</li>\n<li><code>sepc</code>: 保存了处理器需要返回的指令地址，恢复sepc使得处理器能够在处理完异常或中断后继续执行被中断的程序</li>\n<li><code>sscratch</code>: 临时寄存器，此处保存了用户栈指针，临时存放，使得处理器能够在处理完异常或中断后继续执行被中断的程序</li>\n</ul>\n<h3 id=\"Q2-3\"><a href=\"#Q2-3\" class=\"headerlink\" title=\"Q2.3\"></a>Q2.3</h3><p>L50-L56：为何跳过了 <code>x2</code> 和 <code>x4</code>？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ld x1, 1*8(sp)</span><br><span class=\"line\">ld x3, 3*8(sp)</span><br><span class=\"line\">.set n, 5</span><br><span class=\"line\">.rept 27</span><br><span class=\"line\">   LOAD_GP %n</span><br><span class=\"line\">   .set n, n+1</span><br><span class=\"line\">.endr</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"A2-3\"><a href=\"#A2-3\" class=\"headerlink\" title=\"A2.3\"></a>A2.3</h3><p>x2应该是2*8(sp)，但是这里是栈指针，此时已经存在sscratch中。x4是tp线程指针寄存器，用户态程序不使用</p>\n<h3 id=\"Q2-4\"><a href=\"#Q2-4\" class=\"headerlink\" title=\"Q2.4\"></a>Q2.4</h3><p>L60：该指令之后，<code>sp</code> 和 <code>sscratch</code> 中的值分别有什么意义？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">csrrw sp, sscratch, sp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"A2-4\"><a href=\"#A2-4\" class=\"headerlink\" title=\"A2.4\"></a>A2.4</h3><p>sscratch是内核栈指针， sp是用户栈指针</p>\n<h3 id=\"Q2-5\"><a href=\"#Q2-5\" class=\"headerlink\" title=\"Q2.5\"></a>Q2.5</h3><p>__restore：中发生状态切换在哪一条指令？为何该指令执行之后会进入用户态？</p>\n<h3 id=\"A2-5\"><a href=\"#A2-5\" class=\"headerlink\" title=\"A2.5\"></a>A2.5</h3><p><code>sret</code> 返回原来的程序流</p>\n<h3 id=\"Q2-6\"><a href=\"#Q2-6\" class=\"headerlink\" title=\"Q2.6\"></a>Q2.6</h3><p>L13：该指令之后，<code>sp</code> 和 <code>sscratch</code> 中的值分别有什么意义？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">csrrw sp, sscratch, sp</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"A2-6\"><a href=\"#A2-6\" class=\"headerlink\" title=\"A2.6\"></a>A2.6</h3><p><code>sp</code> 切换为内核栈指针，<code>sscratch</code> 保存用户态指针</p>\n<h3 id=\"Q2-7\"><a href=\"#Q2-7\" class=\"headerlink\" title=\"Q2.7\"></a>Q2.7</h3><p>从 U 态进入 S 态是哪一条指令发生的？</p>\n<h3 id=\"A2-7\"><a href=\"#A2-7\" class=\"headerlink\" title=\"A2.7\"></a>A2.7</h3><p>触发trap后，通过L13切换到内核栈，从 U 态进入 S 态</p>\n<h1 id=\"荣誉准则\"><a href=\"#荣誉准则\" class=\"headerlink\" title=\"荣誉准则\"></a>荣誉准则</h1><ol>\n<li><p>在完成本次实验的过程（含此前学习的过程）中，我曾分别与 以下各位 就（与本次实验相关的）以下方面做过交流，还在代码中对应的位置以注释形式记录了具体的交流对象及内容：</p>\n<p> 无</p>\n</li>\n<li><p>此外，我也参考了 以下资料 ，还在代码中对应的位置以注释形式记录了具体的参考来源及内容：</p>\n<p> 无</p>\n</li>\n<li><p>我独立完成了本次实验除以上方面之外的所有工作，包括代码与文档。 我清楚地知道，从以上方面获得的信息在一定程度上降低了实验难度，可能会影响起评分。</p>\n</li>\n<li><p>我从未使用过他人的代码，不管是原封不动地复制，还是经过了某些等价转换。 我未曾也不会向他人（含此后各届同学）复制或公开我的实验代码，我有义务妥善保管好它们。 我提交至本实验的评测系统的代码，均无意于破坏或妨碍任何计算机系统的正常运转。 我清楚地知道，以上情况均为本课程纪律所禁止，若违反，对应的实验成绩将按“-100”分计。</p>\n</li>\n</ol>\n","text":"编程作业首先在 config.rs 中添加常量 MAX_SYSCALL_NUM = 500然后修改 TaskControlBlock 的结构，添加了 syscall-times ，用于记录task对于每个系统调用的次数。1<br>2<br>3<br>4<br>5<br>6<br>","raw":null,"photos":[],"categories":[],"tags":[{"name":"Rcore","slug":"Rcore","count":6,"path":"api/tags/Rcore.json"}]},{"title":"rcore-camp-2025S-stage2-lab2","slug":"rcore-camp-2025S-stage2-lab2","date":"2025-04-30T09:01:57.000Z","updated":"2025-05-05T04:30:44.384Z","comments":true,"path":"api/articles/rcore-camp-2025S-stage2-lab2.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"编程作业\"><a href=\"#编程作业\" class=\"headerlink\" title=\"编程作业\"></a>编程作业</h1><h2 id=\"1-重写-sys-get-time-和-sys-trace\"><a href=\"#1-重写-sys-get-time-和-sys-trace\" class=\"headerlink\" title=\"1. 重写 sys_get_time 和 sys_trace\"></a>1. 重写 sys_get_time 和 sys_trace</h2><p>与lab1基本一样，不过多了虚拟内存到物理内存的映射</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">virt_to_phys</span>(vaddr: VirtAddr) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Result</span>&lt;PhysAddr, &amp;<span class=\"symbol\">'static</span> <span class=\"type\">str</span>&gt;{ ... }</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-mmap-和-munmap-匿名映射\"><a href=\"#2-mmap-和-munmap-匿名映射\" class=\"headerlink\" title=\"2. mmap 和 munmap 匿名映射\"></a>2. mmap 和 munmap 匿名映射</h2><p>直接调用 <code>memory_set</code> 中的接口，检查完一系列情况后直接在 <code>memory_set</code> 中调用 <code>insert_framed_area</code> </p>\n<p> <code>munmap</code> 需要自己仿照 <code>insert_framed_area</code> 实现一个 <code>umap</code> ，由于 <code>sys_munmap</code> 仅会对应 唯一且完整 的 <code>mmap</code> 区间， 不考虑交叉、截断区间的情况。所以实现起来是相当简单的。</p>\n<h1 id=\"简答作业\"><a href=\"#简答作业\" class=\"headerlink\" title=\"简答作业\"></a>简答作业</h1><h2 id=\"Q1请列举-SV39-页表页表项的组成，描述其中的标志位有何作用？\"><a href=\"#Q1请列举-SV39-页表页表项的组成，描述其中的标志位有何作用？\" class=\"headerlink\" title=\"Q1请列举 SV39 页表页表项的组成，描述其中的标志位有何作用？\"></a>Q1请列举 SV39 页表页表项的组成，描述其中的标志位有何作用？</h2><p>PTE中0-7为标志位，10-53是物理页号</p>\n<ul>\n<li>V: 合法</li>\n<li>R/W/X: 读取/写入/取指</li>\n<li>U: 在 CPU 处于 U 特权级的情况下是否被允许访问</li>\n<li>A: 自从页表项上的这一位被清零之后，页表项的对应虚拟页面是否被访问过</li>\n<li>D: 自从页表项上的这一位被清零之后，页表项的对应虚拟页表是否被修改过</li>\n</ul>\n<h2 id=\"Q2缺页\"><a href=\"#Q2缺页\" class=\"headerlink\" title=\"Q2缺页\"></a>Q2缺页</h2><blockquote>\n<p>缺页指的是进程访问页面时页面不在页表中或在页表中无效的现象，此时 MMU 将会返回一个中断， 告知 os 进程内存访问出了问题。os 选择填补页表并重新执行异常指令或者杀死进程。</p>\n</blockquote>\n<h3 id=\"Q2-1请问哪些异常可能是缺页导致的？\"><a href=\"#Q2-1请问哪些异常可能是缺页导致的？\" class=\"headerlink\" title=\"Q2.1请问哪些异常可能是缺页导致的？\"></a>Q2.1请问哪些异常可能是缺页导致的？</h3><ul>\n<li>PageFault</li>\n<li>AccessViolation</li>\n<li>SegmentationFault</li>\n</ul>\n<h3 id=\"Q2-2发生缺页时，描述相关重要寄存器的值，上次实验描述过的可以简略。\"><a href=\"#Q2-2发生缺页时，描述相关重要寄存器的值，上次实验描述过的可以简略。\" class=\"headerlink\" title=\"Q2.2发生缺页时，描述相关重要寄存器的值，上次实验描述过的可以简略。\"></a>Q2.2发生缺页时，描述相关重要寄存器的值，上次实验描述过的可以简略。</h3><h4 id=\"STVAL（Supervisor-Trap-Value）寄存器：\"><a href=\"#STVAL（Supervisor-Trap-Value）寄存器：\" class=\"headerlink\" title=\"STVAL（Supervisor Trap Value）寄存器：\"></a>STVAL（Supervisor Trap Value）寄存器：</h4><p>该寄存器用于存储导致异常的虚拟地址。<br>当发生缺页异常时，STVAL 寄存器会被设置为引发异常的虚拟地址，即所请求的页的地址。<br>在页表解析失败的情况下，操作系统可以通过此地址进行进一步的异常处理（如页面分配或置换）。</p>\n<h4 id=\"SCAUSE（Supervisor-Cause）寄存器：\"><a href=\"#SCAUSE（Supervisor-Cause）寄存器：\" class=\"headerlink\" title=\"SCAUSE（Supervisor Cause）寄存器：\"></a>SCAUSE（Supervisor Cause）寄存器：</h4><p>用于存储异常的原因代码。<br>当发生缺页异常时，SCAUSE 寄存器的值会指向与缺页相关的异常原因代码。</p>\n<h4 id=\"SEPC（Supervisor-Exception-Program-Counter）寄存器：\"><a href=\"#SEPC（Supervisor-Exception-Program-Counter）寄存器：\" class=\"headerlink\" title=\"SEPC（Supervisor Exception Program Counter）寄存器：\"></a>SEPC（Supervisor Exception Program Counter）寄存器：</h4><p>该寄存器用于保存发生异常的指令地址。<br>当缺页异常发生时，SEPC 会保存导致异常的指令地址，以便异常处理完成后能继续从该指令执行。</p>\n<blockquote>\n<p>缺页有两个常见的原因，其一是 Lazy 策略，也就是直到内存页面被访问才实际进行页表操作。 比如，一个程序被执行时，进程的代码段理论上需要从磁盘加载到内存。但是 os 并不会马上这样做， 而是会保存 .text 段在磁盘的位置信息，在这些代码第一次被执行时才完成从磁盘的加载操作。</p>\n</blockquote>\n<h3 id=\"Q2-3这样做有哪些好处？\"><a href=\"#Q2-3这样做有哪些好处？\" class=\"headerlink\" title=\"Q2.3这样做有哪些好处？\"></a>Q2.3这样做有哪些好处？</h3><ol>\n<li>只有在实际需要时才加载页面，可以显著减少内存的占用</li>\n<li>加快程序的启动速度</li>\n<li>减少非必要的磁盘I/O</li>\n</ol>\n<blockquote>\n<p>其实，我们的 mmap 也可以采取 Lazy 策略，比如：一个用户进程先后申请了 10G 的内存空间， 然后用了其中 1M 就直接退出了。按照现在的做法，我们显然亏大了，进行了很多没有意义的页表操作。</p>\n</blockquote>\n<h3 id=\"Q2-4处理-10G-连续的内存页面，对应的-SV39-页表大致占用多少内存-估算数量级即可-？\"><a href=\"#Q2-4处理-10G-连续的内存页面，对应的-SV39-页表大致占用多少内存-估算数量级即可-？\" class=\"headerlink\" title=\"Q2.4处理 10G 连续的内存页面，对应的 SV39 页表大致占用多少内存 (估算数量级即可)？\"></a>Q2.4处理 10G 连续的内存页面，对应的 SV39 页表大致占用多少内存 (估算数量级即可)？</h3><p>约10KB</p>\n<h3 id=\"Q2-5请简单思考如何才能实现-Lazy-策略，缺页时又如何处理？描述合理即可，不需要考虑实现。\"><a href=\"#Q2-5请简单思考如何才能实现-Lazy-策略，缺页时又如何处理？描述合理即可，不需要考虑实现。\" class=\"headerlink\" title=\"Q2.5请简单思考如何才能实现 Lazy 策略，缺页时又如何处理？描述合理即可，不需要考虑实现。\"></a>Q2.5请简单思考如何才能实现 Lazy 策略，缺页时又如何处理？描述合理即可，不需要考虑实现。</h3><p>在进程启动时，不立即加载所有需要的页面，而是只加载必要的页面<br>为其他页面在页表中设置一个标记，表示这些页面尚未加载。 对于未加载的页面，页表条目指向一个特殊的缺页处理程序。</p>\n<p>捕获缺页异常-&gt;查找页面位置-&gt;加载页面-&gt;恢复</p>\n<blockquote>\n<p>缺页的另一个常见原因是 swap 策略，也就是内存页面可能被换到磁盘上了，导致对应页面失效。</p>\n</blockquote>\n<h3 id=\"Q2-6此时页面失效如何表现在页表项-PTE-上？\"><a href=\"#Q2-6此时页面失效如何表现在页表项-PTE-上？\" class=\"headerlink\" title=\"Q2.6此时页面失效如何表现在页表项(PTE)上？\"></a>Q2.6此时页面失效如何表现在页表项(PTE)上？</h3><p>PTEFlag中的V标志置0</p>\n<h2 id=\"Q3双页表与单页表\"><a href=\"#Q3双页表与单页表\" class=\"headerlink\" title=\"Q3双页表与单页表\"></a>Q3双页表与单页表</h2><blockquote>\n<p>为了防范侧信道攻击，我们的 os 使用了双页表。但是传统的设计一直是单页表的，也就是说， 用户线程和对应的内核线程共用同一张页表，只不过内核对应的地址只允许在内核态访问。 (备注：这里的单/双的说法仅为自创的通俗说法，并无这个名词概念，详情见 KPTI )</p>\n</blockquote>\n<h3 id=\"Q3-1在单页表情况下，如何更换页表？\"><a href=\"#Q3-1在单页表情况下，如何更换页表？\" class=\"headerlink\" title=\"Q3.1在单页表情况下，如何更换页表？\"></a>Q3.1在单页表情况下，如何更换页表？</h3><p>保存当前页表-&gt;设置新的页表-&gt;刷新TLB</p>\n<h3 id=\"Q3-2单页表情况下，如何控制用户态无法访问内核页面？（tips-看看上一题最后一问）\"><a href=\"#Q3-2单页表情况下，如何控制用户态无法访问内核页面？（tips-看看上一题最后一问）\" class=\"headerlink\" title=\"Q3.2单页表情况下，如何控制用户态无法访问内核页面？（tips:看看上一题最后一问）\"></a>Q3.2单页表情况下，如何控制用户态无法访问内核页面？（tips:看看上一题最后一问）</h3><p>PTEFlag中的U标志置0</p>\n<h3 id=\"Q3-3单页表有何优势？（回答合理即可）\"><a href=\"#Q3-3单页表有何优势？（回答合理即可）\" class=\"headerlink\" title=\"Q3.3单页表有何优势？（回答合理即可）\"></a>Q3.3单页表有何优势？（回答合理即可）</h3><ul>\n<li>有更高的性能，在时间上的开销小</li>\n<li>实现简单</li>\n<li>易于管理</li>\n</ul>\n<h3 id=\"Q3-4双页表实现下，何时需要更换页表？假设你写一个单页表操作系统，你会选择何时更换页表（回答合理即可）？\"><a href=\"#Q3-4双页表实现下，何时需要更换页表？假设你写一个单页表操作系统，你会选择何时更换页表（回答合理即可）？\" class=\"headerlink\" title=\"Q3.4双页表实现下，何时需要更换页表？假设你写一个单页表操作系统，你会选择何时更换页表（回答合理即可）？\"></a>Q3.4双页表实现下，何时需要更换页表？假设你写一个单页表操作系统，你会选择何时更换页表（回答合理即可）？</h3><p>双页表下：<br>上下文切换 页表更新 内存管理策略（如swap）</p>\n<p>单页表下：<br>上下文切换 处理缺页异常 替换长时间没被使用的PTE 页表大小调整</p>\n<h1 id=\"荣誉准则\"><a href=\"#荣誉准则\" class=\"headerlink\" title=\"荣誉准则\"></a>荣誉准则</h1><ol>\n<li><p>在完成本次实验的过程（含此前学习的过程）中，我曾分别与 以下各位 就（与本次实验相关的）以下方面做过交流，还在代码中对应的位置以注释形式记录了具体的交流对象及内容：</p>\n<p>无</p>\n</li>\n<li><p>此外，我也参考了 以下资料 ，还在代码中对应的位置以注释形式记录了具体的参考来源及内容：</p>\n<p>无</p>\n</li>\n<li><p>我独立完成了本次实验除以上方面之外的所有工作，包括代码与文档。 我清楚地知道，从以上方面获得的信息在一定程度上降低了实验难度，可能会影响起评分。</p>\n</li>\n<li><p>我从未使用过他人的代码，不管是原封不动地复制，还是经过了某些等价转换。 我未曾也不会向他人（含此后各届同学）复制或公开我的实验代码，我有义务妥善保管好它们。 我提交至本实验的评测系统的代码，均无意于破坏或妨碍任何计算机系统的正常运转。 我清楚地知道，以上情况均为本课程纪律所禁止，若违反，对应的实验成绩将按“-100”分计。</p>\n</li>\n</ol>\n","text":"编程作业1. 重写 sys_get_time 和 sys_trace与lab1基本一样，不过多了虚拟内存到物理内存的映射1<br>pub fn virt_to_phys(vaddr: VirtAddr) -&gt; Result&lt;PhysAddr, &amp;'static","raw":null,"photos":[],"categories":[],"tags":[{"name":"Rcore","slug":"Rcore","count":6,"path":"api/tags/Rcore.json"}]},{"title":"rcore-camp-2025S-stage2-lab3","slug":"rcore-camp-2025S-stage2-lab3","date":"2025-04-30T09:02:13.000Z","updated":"2025-05-05T04:30:44.384Z","comments":true,"path":"api/articles/rcore-camp-2025S-stage2-lab3.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"编程作业\"><a href=\"#编程作业\" class=\"headerlink\" title=\"编程作业\"></a>编程作业</h1><h2 id=\"1-迁移\"><a href=\"#1-迁移\" class=\"headerlink\" title=\"1. 迁移\"></a>1. 迁移</h2><p>之前的 <code>TaskManager</code> 被拆分到 <code>manager.rs</code> 和 <code>processor.rs</code> 中，<br>把之前的代码都迁移到 <code>processor.rs</code> 中即可。</p>\n<h2 id=\"2-Spawn\"><a href=\"#2-Spawn\" class=\"headerlink\" title=\"2. Spawn\"></a>2. Spawn</h2><p>从 <code>fork</code> 和 <code>exec</code> 中各偷一点缝合起来就行了</p>\n<h2 id=\"3-Stride\"><a href=\"#3-Stride\" class=\"headerlink\" title=\"3. Stride\"></a>3. Stride</h2><ol>\n<li>首先，为 <code>TaskControlBlockInner</code> 添加 <code>stride</code> 和 <code>priority</code> 字段。</li>\n<li>将 <code>TaskManager</code> 中存放TCB的数据结构改为 <code>BinaryHeap</code> 详见<a href=\"https://doc.rust-lang.org/std/collections/struct.BinaryHeap.html\">BinaryHeap</a></li>\n<li>为 <code>TaskControlBlock</code> 实现以下trait:<ul>\n<li><code>Ord</code></li>\n<li><code>PartialOrd</code></li>\n<li>‘Eq’</li>\n<li>‘PartialEq’</li>\n</ul>\n</li>\n<li>修改 <code>run_tasks()</code> ，使得进程运行完后，可以增加它的stride</li>\n</ol>\n<h1 id=\"简答作业\"><a href=\"#简答作业\" class=\"headerlink\" title=\"简答作业\"></a>简答作业</h1><p>stride 算法深入</p>\n<p>stride 算法原理非常简单，但是有一个比较大的问题。例如两个 pass = 10 的进程，使用 8bit 无符号整形储存 stride， p1.stride = 255, p2.stride = 250，在 p2 执行一个时间片后，理论上下一次应该 p1 执行。</p>\n<h2 id=\"Q1-实际情况是轮到-p1-执行吗？为什么？\"><a href=\"#Q1-实际情况是轮到-p1-执行吗？为什么？\" class=\"headerlink\" title=\"Q1.实际情况是轮到 p1 执行吗？为什么？\"></a>Q1.实际情况是轮到 p1 执行吗？为什么？</h2><p>不是，应该轮到P2执行，因为P2溢出回环后会比P1小</p>\n<blockquote>\n<p>我们之前要求进程优先级 &gt;= 2 其实就是为了解决这个问题。可以证明， 在不考虑溢出的情况下 , 在进程优先级全部 &gt;= 2 的情况下，如果严格按照算法执行，那么 STRIDE_MAX – STRIDE_MIN &lt;= BigStride / 2。</p>\n</blockquote>\n<h2 id=\"Q2-为什么？尝试简单说明（不要求严格证明）。\"><a href=\"#Q2-为什么？尝试简单说明（不要求严格证明）。\" class=\"headerlink\" title=\"Q2.为什么？尝试简单说明（不要求严格证明）。\"></a>Q2.为什么？尝试简单说明（不要求严格证明）。</h2><p>在 stride 算法中，保证进程的优先级大于等于 2 可以避免 stride 值过小或溢出问题。<br>通过控制进程间的优先级差距，确保 STRIDE_MAX - STRIDE_MIN ≤ BigStride / 2，<br>即最大 stride 和最小 stride 之间的差异不超过最大 stride 的一半，<br>这样可以防止过大的优先级差导致调度不公平，从而保持系统的公平性和稳定性。</p>\n<h2 id=\"Q3-已知以上结论，考虑溢出的情况下，可以为-Stride-设计特别的比较器，让-BinaryHeap-的-pop-方法能返回真正最小的-Stride。补全下列代码中的-partial-cmp-函数，假设两个-Stride-永远不会相等。\"><a href=\"#Q3-已知以上结论，考虑溢出的情况下，可以为-Stride-设计特别的比较器，让-BinaryHeap-的-pop-方法能返回真正最小的-Stride。补全下列代码中的-partial-cmp-函数，假设两个-Stride-永远不会相等。\" class=\"headerlink\" title=\"Q3.已知以上结论，考虑溢出的情况下，可以为 Stride 设计特别的比较器，让 BinaryHeap 的 pop 方法能返回真正最小的 Stride。补全下列代码中的 partial_cmp 函数，假设两个 Stride 永远不会相等。\"></a>Q3.已知以上结论，考虑溢出的情况下，可以为 Stride 设计特别的比较器，让 BinaryHeap<stride> 的 pop 方法能返回真正最小的 Stride。补全下列代码中的 partial_cmp 函数，假设两个 Stride 永远不会相等。</stride></h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> core::cmp::Ordering;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Stride</span>(<span class=\"type\">u64</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">PartialOrd</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Stride</span> {</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">partial_cmp</span>(&amp;<span class=\"keyword\">self</span>, other: &amp;<span class=\"keyword\">Self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;Ordering&gt; {</span><br><span class=\"line\">       <span class=\"keyword\">let</span> <span class=\"variable\">self_stride</span> = <span class=\"keyword\">self</span>.<span class=\"number\">0</span> &amp; <span class=\"number\">255</span>;  <span class=\"comment\">// 保证 stride 在 0 到 255 之间</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> <span class=\"variable\">other_stride</span> = other.<span class=\"number\">0</span> &amp; <span class=\"number\">255</span>; <span class=\"comment\">// 保证 stride 在 0 到 255 之间</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> self_stride &lt; other_stride {</span><br><span class=\"line\">          <span class=\"title function_ invoke__\">Some</span>(Ordering::Less)</span><br><span class=\"line\">       } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> self_stride &gt; other_stride {</span><br><span class=\"line\">          <span class=\"title function_ invoke__\">Some</span>(Ordering::Greater)</span><br><span class=\"line\">       } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">          <span class=\"title function_ invoke__\">Some</span>(Ordering::Equal)</span><br><span class=\"line\">       }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">PartialEq</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Stride</span> {</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">eq</span>(&amp;<span class=\"keyword\">self</span>, other: &amp;<span class=\"keyword\">Self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">bool</span> {</span><br><span class=\"line\">        <span class=\"literal\">false</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>TIPS: 使用 8 bits 存储 stride, BigStride = 255, 则: (125 &lt; 255) == false, (129 &lt; 255) == true.</p>\n<h1 id=\"荣誉准则\"><a href=\"#荣誉准则\" class=\"headerlink\" title=\"荣誉准则\"></a>荣誉准则</h1><ol>\n<li><p>在完成本次实验的过程（含此前学习的过程）中，我曾分别与 以下各位 就（与本次实验相关的）以下方面做过交流，还在代码中对应的位置以注释形式记录了具体的交流对象及内容：</p>\n<p>无</p>\n</li>\n<li><p>此外，我也参考了 以下资料 ，还在代码中对应的位置以注释形式记录了具体的参考来源及内容：</p>\n<p>无</p>\n</li>\n<li><p>我独立完成了本次实验除以上方面之外的所有工作，包括代码与文档。 我清楚地知道，从以上方面获得的信息在一定程度上降低了实验难度，可能会影响起评分。</p>\n</li>\n<li><p>我从未使用过他人的代码，不管是原封不动地复制，还是经过了某些等价转换。 我未曾也不会向他人（含此后各届同学）复制或公开我的实验代码，我有义务妥善保管好它们。 我提交至本实验的评测系统的代码，均无意于破坏或妨碍任何计算机系统的正常运转。 我清楚地知道，以上情况均为本课程纪律所禁止，若违反，对应的实验成绩将按“-100”分计。</p>\n</li>\n</ol>\n","text":"编程作业1. 迁移之前的 TaskManager 被拆分到 manager.rs 和 processor.rs 中，<br>把之前的代码都迁移到 processor.rs 中即可。2. Spawn从 fork 和 exec 中各偷一点缝合起来就行了3. Stride首先，为 Ta","raw":null,"photos":[],"categories":[],"tags":[{"name":"Rcore","slug":"Rcore","count":6,"path":"api/tags/Rcore.json"}]},{"title":"rcore-camp-2025S-stage2-lab5","slug":"rcore-camp-2025S-stage2-lab5","date":"2025-04-30T09:02:42.000Z","updated":"2025-05-05T04:30:44.385Z","comments":true,"path":"api/articles/rcore-camp-2025S-stage2-lab5.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"编程作业\"><a href=\"#编程作业\" class=\"headerlink\" title=\"编程作业\"></a>编程作业</h1><h2 id=\"死锁检测\"><a href=\"#死锁检测\" class=\"headerlink\" title=\"死锁检测\"></a>死锁检测</h2><p>mutex只要发现无法申请加锁就判断为死锁即可<br>semaphore的话<br>每个线程内部自己维护 <code>need</code> 和 <code>allocation</code> 数组，其中存放的是 <code>(sem_id, count)</code>。<br>然后在 <code>down</code> 的时候在从各个线程中汇总起来，进行死锁检测计算。</p>\n<h1 id=\"简答作业\"><a href=\"#简答作业\" class=\"headerlink\" title=\"简答作业\"></a>简答作业</h1><h2 id=\"Q1-在我们的多线程实现中，当主线程-即-0-号线程-退出时，视为整个进程退出，-此时需要结束该进程管理的所有线程并回收其资源。\"><a href=\"#Q1-在我们的多线程实现中，当主线程-即-0-号线程-退出时，视为整个进程退出，-此时需要结束该进程管理的所有线程并回收其资源。\" class=\"headerlink\" title=\"Q1.在我们的多线程实现中，当主线程 (即 0 号线程) 退出时，视为整个进程退出， 此时需要结束该进程管理的所有线程并回收其资源。\"></a>Q1.在我们的多线程实现中，当主线程 (即 0 号线程) 退出时，视为整个进程退出， 此时需要结束该进程管理的所有线程并回收其资源。</h2><ul>\n<li>需要回收的资源有哪些？<ul>\n<li>线程资源</li>\n<li>内存资源</li>\n<li>同步资源（如锁、信号量</li>\n<li>IO资源</li>\n</ul>\n</li>\n<li>其他线程的 TaskControlBlock 可能在哪些位置被引用，分别是否需要回收，为什么？<ul>\n<li>任务队列：需要回收，避免内存泄漏</li>\n<li>线程调度器：需要回收，调度器会持有无用的引用，这会导致内存泄漏或资源浪费。</li>\n<li>等待队列：线程在等待某个资源，但是线程已经退出了，如果没及时移除，可能会导致内存泄漏。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Q2-对比以下两种-Mutex-中的实现，二者有什么区别？这些区别可能会导致什么问题？\"><a href=\"#Q2-对比以下两种-Mutex-中的实现，二者有什么区别？这些区别可能会导致什么问题？\" class=\"headerlink\" title=\"Q2.对比以下两种 Mutex 中的实现，二者有什么区别？这些区别可能会导致什么问题？\"></a>Q2.对比以下两种 Mutex 中的实现，二者有什么区别？这些区别可能会导致什么问题？</h2><p>应该是对locked状态的处理不同<br>Mutex1：无论是否有等待的任务，都会先将 locked 设为 false，然后再尝试唤醒等待队列中的任务。<br>Mutex2：只有在没有等待任务时，才将 locked 设为 false；如果有等待任务，locked 状态保持为 true。</p>\n<p>在 Mutex1 中，当有等待任务时，将 locked 设为 false 后，可能会导致其他线程在等待的任务被唤醒并获取锁之前获得锁，造成竞争条件，破坏互斥锁的正确性。<br>Mutex2 的实现避免了这个问题，因为当有等待任务时，locked 保持为 true，确保了只有被唤醒的任务才能继续持有锁，维护了互斥性。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Mutex</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Mutex1</span> {</span><br><span class=\"line\">   <span class=\"keyword\">fn</span> <span class=\"title function_\">unlock</span>(&amp;<span class=\"keyword\">self</span>) {</span><br><span class=\"line\">      <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">mutex_inner</span> = <span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">exclusive_access</span>();</span><br><span class=\"line\">      <span class=\"built_in\">assert!</span>(mutex_inner.locked);</span><br><span class=\"line\">      mutex_inner.locked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Some</span>(waking_task) = mutex_inner.wait_queue.<span class=\"title function_ invoke__\">pop_front</span>() {</span><br><span class=\"line\">         <span class=\"title function_ invoke__\">add_task</span>(waking_task);</span><br><span class=\"line\">      }</span><br><span class=\"line\">   }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Mutex</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Mutex2</span> {</span><br><span class=\"line\">   <span class=\"keyword\">fn</span> <span class=\"title function_\">unlock</span>(&amp;<span class=\"keyword\">self</span>) {</span><br><span class=\"line\">      <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">mutex_inner</span> = <span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">exclusive_access</span>();</span><br><span class=\"line\">      <span class=\"built_in\">assert!</span>(mutex_inner.locked);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Some</span>(waking_task) = mutex_inner.wait_queue.<span class=\"title function_ invoke__\">pop_front</span>() {</span><br><span class=\"line\">         <span class=\"title function_ invoke__\">add_task</span>(waking_task);</span><br><span class=\"line\">      } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">         mutex_inner.locked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      }</span><br><span class=\"line\">   }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"荣誉准则\"><a href=\"#荣誉准则\" class=\"headerlink\" title=\"荣誉准则\"></a>荣誉准则</h1><ol>\n<li><p>在完成本次实验的过程（含此前学习的过程）中，我曾分别与 以下各位 就（与本次实验相关的）以下方面做过交流，还在代码中对应的位置以注释形式记录了具体的交流对象及内容：</p>\n<p>无</p>\n</li>\n<li><p>此外，我也参考了 以下资料 ，还在代码中对应的位置以注释形式记录了具体的参考来源及内容：</p>\n<p>无</p>\n</li>\n<li><p>我独立完成了本次实验除以上方面之外的所有工作，包括代码与文档。 我清楚地知道，从以上方面获得的信息在一定程度上降低了实验难度，可能会影响起评分。</p>\n</li>\n<li><p>我从未使用过他人的代码，不管是原封不动地复制，还是经过了某些等价转换。 我未曾也不会向他人（含此后各届同学）复制或公开我的实验代码，我有义务妥善保管好它们。 我提交至本实验的评测系统的代码，均无意于破坏或妨碍任何计算机系统的正常运转。 我清楚地知道，以上情况均为本课程纪律所禁止，若违反，对应的实验成绩将按“-100”分计。</p>\n</li>\n</ol>\n","text":"编程作业死锁检测mutex只要发现无法申请加锁就判断为死锁即可<br>semaphore的话<br>每个线程内部自己维护 need 和 allocation 数组，其中存放的是 (sem_id, count)。<br>然后在 down 的时候在从各个线程中汇总起来，进行死锁检测计","raw":null,"photos":[],"categories":[],"tags":[{"name":"Rcore","slug":"Rcore","count":6,"path":"api/tags/Rcore.json"}]},{"title":"rcore-camp-2025S-stage2-lab4","slug":"rcore-camp-2025S-stage2-lab4","date":"2025-04-30T09:02:28.000Z","updated":"2025-05-05T04:30:44.384Z","comments":true,"path":"api/articles/rcore-camp-2025S-stage2-lab4.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"编程作业\"><a href=\"#编程作业\" class=\"headerlink\" title=\"编程作业\"></a>编程作业</h1><h2 id=\"1-迁移\"><a href=\"#1-迁移\" class=\"headerlink\" title=\"1.迁移\"></a>1.迁移</h2><p>直接迁移即可，只需稍微修改一下spawn，因为文件系统的引入，我们需要从文件系统中加载用户程序</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">sys_spawn</span>(path: *<span class=\"keyword\">const</span> <span class=\"type\">u8</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">isize</span> {</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> <span class=\"variable\">Some</span>(app_inode) = <span class=\"title function_ invoke__\">open_file</span>(path.<span class=\"title function_ invoke__\">as_str</span>(), OpenFlags::RDONLY) {</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">data</span> = app_inode.<span class=\"title function_ invoke__\">read_all</span>();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">new_task</span> = current_task.<span class=\"title function_ invoke__\">spawn</span>(data.<span class=\"title function_ invoke__\">as_slice</span>());</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-fstat\"><a href=\"#2-fstat\" class=\"headerlink\" title=\"2.fstat\"></a>2.fstat</h2><p>就是单纯的获得 <code>(ino, mode, nlink)</code> ，并把它们填到 <code>Stat</code> 之中<br><code>nlink</code> 直接暴力遍历并计数即可<br>主要还是 <code>ino</code> 的获取， <code>Inode</code> 将自己的 <code>block_id</code> 和 <code>block_offset</code> 传给 <code>fs</code><br>然后我们自己通过这两个参数算出 <code>ino</code></p>\n<h2 id=\"3-linkat\"><a href=\"#3-linkat\" class=\"headerlink\" title=\"3.linkat\"></a>3.linkat</h2><p>仿照 <code>create()</code> 写了一个 <code>linkat</code><br>根据 <code>old_name</code> 去读取 <code>old_inode_id</code> ，然后检测 <code>new_name</code> 是否存在，<br>写入一个新的 <code>new_name</code> ，其 <code>inode_id</code> 为 <code>old_inode_id</code></p>\n<h2 id=\"4-unlinkat\"><a href=\"#4-unlinkat\" class=\"headerlink\" title=\"4.unlinkat\"></a>4.unlinkat</h2><p>直接暴力查找，如果找到对应的dirent，将其改为DirEntry::empty()</p>\n<h1 id=\"简答作业\"><a href=\"#简答作业\" class=\"headerlink\" title=\"简答作业\"></a>简答作业</h1><h2 id=\"Q1-在我们的easy-fs中，root-inode起着什么作用？如果root-inode中的内容损坏了，会发生什么？\"><a href=\"#Q1-在我们的easy-fs中，root-inode起着什么作用？如果root-inode中的内容损坏了，会发生什么？\" class=\"headerlink\" title=\"Q1.在我们的easy-fs中，root inode起着什么作用？如果root inode中的内容损坏了，会发生什么？\"></a>Q1.在我们的easy-fs中，root inode起着什么作用？如果root inode中的内容损坏了，会发生什么？</h2><p>ROOT_INODE是根目录所对应的inode，如果ROOT_INODE损坏，整个文件系统也无法正确运行</p>\n<h2 id=\"Q2-举出使用-pipe-的一个实际应用的例子。\"><a href=\"#Q2-举出使用-pipe-的一个实际应用的例子。\" class=\"headerlink\" title=\"Q2.举出使用 pipe 的一个实际应用的例子。\"></a>Q2.举出使用 pipe 的一个实际应用的例子。</h2><p>一个命令的输出作为另一个命令的输入</p>\n<h2 id=\"Q3-如果需要在多个进程间互相通信，则需要为每一对进程建立一个管道，非常繁琐，请设计一个更易用的多进程通信机制。\"><a href=\"#Q3-如果需要在多个进程间互相通信，则需要为每一对进程建立一个管道，非常繁琐，请设计一个更易用的多进程通信机制。\" class=\"headerlink\" title=\"Q3.如果需要在多个进程间互相通信，则需要为每一对进程建立一个管道，非常繁琐，请设计一个更易用的多进程通信机制。\"></a>Q3.如果需要在多个进程间互相通信，则需要为每一对进程建立一个管道，非常繁琐，请设计一个更易用的多进程通信机制。</h2><ul>\n<li>共享内存</li>\n<li>golang的channel</li>\n</ul>\n<h1 id=\"荣誉准则\"><a href=\"#荣誉准则\" class=\"headerlink\" title=\"荣誉准则\"></a>荣誉准则</h1><ol>\n<li><p>在完成本次实验的过程（含此前学习的过程）中，我曾分别与 以下各位 就（与本次实验相关的）以下方面做过交流，还在代码中对应的位置以注释形式记录了具体的交流对象及内容：</p>\n<p>无</p>\n</li>\n<li><p>此外，我也参考了 以下资料 ，还在代码中对应的位置以注释形式记录了具体的参考来源及内容：</p>\n<p>无</p>\n</li>\n<li><p>我独立完成了本次实验除以上方面之外的所有工作，包括代码与文档。 我清楚地知道，从以上方面获得的信息在一定程度上降低了实验难度，可能会影响起评分。</p>\n</li>\n<li><p>我从未使用过他人的代码，不管是原封不动地复制，还是经过了某些等价转换。 我未曾也不会向他人（含此后各届同学）复制或公开我的实验代码，我有义务妥善保管好它们。 我提交至本实验的评测系统的代码，均无意于破坏或妨碍任何计算机系统的正常运转。 我清楚地知道，以上情况均为本课程纪律所禁止，若违反，对应的实验成绩将按“-100”分计。</p>\n</li>\n</ol>\n","text":"编程作业1.迁移直接迁移即可，只需稍微修改一下spawn，因为文件系统的引入，我们需要从文件系统中加载用户程序1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>pub fn sys_spawn(path: *const u8) -&gt; ","raw":null,"photos":[],"categories":[],"tags":[{"name":"Rcore","slug":"Rcore","count":6,"path":"api/tags/Rcore.json"}]}]}