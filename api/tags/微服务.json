{"name":"微服务","slug":"微服务","count":3,"postlist":[{"title":"微服务架构与设计模式（张引）_part1","slug":"微服务架构与设计模式（张引）-part1","date":"2025-03-17T15:39:34.000Z","updated":"2025-05-05T04:30:44.385Z","comments":true,"path":"api/articles/微服务架构与设计模式（张引）-part1.json","excerpt":"<h1 id=\"容器、容器编排、容器化开发\"><a href=\"#容器、容器编排、容器化开发\" class=\"headerlink\" title=\"容器、容器编排、容器化开发\"></a>容器、容器编排、容器化开发</h1><p>在软件开发中，环境配置繁琐、兼容性问题和资源浪费是常见挑战。虚拟化技术虽能隔离环境，但传统虚拟机启动慢、占用资源多。Docker 作为轻量级虚拟化方案，解决了这些问题，使应用部署更高效。</p>\n<p>本篇博客介绍 Docker 的基本概念、容器管理、数据库镜像使用，以及 Docker Compose 容器编排，并探讨 如何使用 Dockerfile 进行容器化开发，帮助开发者高效构建和部署应用。</p>","keywords":null,"cover":null,"content":null,"text":"容器、容器编排、容器化开发在软件开发中，环境配置繁琐、兼容性问题和资源浪费是常见挑战。虚拟化技术虽能隔离环境，但传统虚拟机启动慢、占用资源多。Docker 作为轻量级虚拟化方案，解决了这些问题，使应用部署更高效。本篇博客介绍 Docker 的基本概念、容器管理、数据库镜像使用，以","raw":null,"photos":[],"categories":[],"tags":[{"name":"微服务","slug":"微服务","count":3,"path":"api/tags/微服务.json"}]},{"title":"微服务架构与设计模式（张引）_part2","slug":"微服务架构与设计模式（张引）-part2","date":"2025-03-17T15:51:06.000Z","updated":"2025-05-05T04:30:44.385Z","comments":true,"path":"api/articles/微服务架构与设计模式（张引）-part2.json","excerpt":"<h1 id=\"单体应用与微服务架构应用\"><a href=\"#单体应用与微服务架构应用\" class=\"headerlink\" title=\"单体应用与微服务架构应用\"></a>单体应用与微服务架构应用</h1><p>在软件架构设计中，单体应用和微服务架构是两种常见模式，各有优缺点。单体应用适合简单项目，开发、部署、测试和调试较为方便，但随着业务增长，维护和扩展变得困难。而微服务架构将系统拆分为多个独立服务，提升可扩展性和技术灵活性，但增加了开发、部署和测试的复杂度。</p>\n<p>本篇博客将介绍 单体应用与微服务架构的核心概念、优缺点及适用场景，帮助开发者在实际项目中做出合适的架构选择。</p>","keywords":null,"cover":null,"content":null,"text":"单体应用与微服务架构应用在软件架构设计中，单体应用和微服务架构是两种常见模式，各有优缺点。单体应用适合简单项目，开发、部署、测试和调试较为方便，但随着业务增长，维护和扩展变得困难。而微服务架构将系统拆分为多个独立服务，提升可扩展性和技术灵活性，但增加了开发、部署和测试的复杂度。本","raw":null,"photos":[],"categories":[],"tags":[{"name":"微服务","slug":"微服务","count":3,"path":"api/tags/微服务.json"}]},{"title":"微服务架构与设计模式（张引）","slug":"微服务架构与设计模式（张引）","date":"2025-03-17T15:36:32.000Z","updated":"2025-05-05T04:30:44.385Z","comments":true,"path":"api/articles/微服务架构与设计模式（张引）.json","excerpt":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>仓颉云原生</p>\n<p>今年的课程转为了仓颉版本，用仓颉语言按照业界的实际标准搓了一套微服务的框架</p>\n<p><img src=\"/../Asset/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%BC%A0%E5%BC%95%EF%BC%89/image.png\"></p>\n<p>正如MiniX之于Unix，教学用的框架复杂度更低。易于同学们理解和使用。</p>","keywords":null,"cover":"/../Asset/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%BC%A0%E5%BC%95%EF%BC%89/image.png","content":null,"text":"介绍仓颉云原生今年的课程转为了仓颉版本，用仓颉语言按照业界的实际标准搓了一套微服务的框架 [Figure] 然后一路回车即可，生成的密钥默认存放在~/.ssh/之后复制公钥 ~/.ssh/id_rsa.pub的内容，并添加到GitCode的SSH Key设置页面","raw":null,"photos":[],"categories":[],"tags":[{"name":"微服务","slug":"微服务","count":3,"path":"api/tags/微服务.json"}]}]}